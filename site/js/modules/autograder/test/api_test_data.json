{
    "{\"arguments\":{\"bcc\":[\"course-other@test.edulinq.org\"],\"body\":\"Body\",\"cc\":[\"course-owner@test.edulinq.org\"],\"course-id\":\"COURSE101\",\"dry-run\":false,\"subject\":\"Subject\",\"to\":[\"course-student@test.edulinq.org\"],\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/admin/email\",\"files\":[]}": {
        "endpoint": "courses/admin/email",
        "module_name": "autograder.api.courses.admin.email",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "dry-run": false,
            "to": [
                "course-student@test.edulinq.org"
            ],
            "cc": [
                "course-owner@test.edulinq.org"
            ],
            "bcc": [
                "course-other@test.edulinq.org"
            ],
            "subject": "Subject",
            "body": "Body"
        },
        "output": {
            "to": [
                "course-student@test.edulinq.org"
            ],
            "cc": [
                "course-owner@test.edulinq.org"
            ],
            "bcc": [
                "course-other@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"bcc\":[\"course-grader@test.edulinq.org\"],\"body\":\"Body\",\"course-id\":\"COURSE101\",\"dry-run\":false,\"subject\":\"Subject\",\"to\":[\"student\",\"course-other@test.edulinq.org\"],\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/admin/email\",\"files\":[]}": {
        "endpoint": "courses/admin/email",
        "module_name": "autograder.api.courses.admin.email",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "dry-run": false,
            "to": [
                "student",
                "course-other@test.edulinq.org"
            ],
            "bcc": [
                "course-grader@test.edulinq.org"
            ],
            "subject": "Subject",
            "body": "Body"
        },
        "output": {
            "to": [
                "course-other@test.edulinq.org",
                "course-student@test.edulinq.org"
            ],
            "cc": [],
            "bcc": [
                "course-grader@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"course101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/admin/update\",\"files\":[]}": {
        "endpoint": "courses/admin/update",
        "module_name": "autograder.api.courses.admin.update",
        "arguments": {
            "course": "course101"
        },
        "output": {
            "result": {
                "course-id": "course101",
                "success": true,
                "message": "",
                "created": false,
                "updated": true,
                "lms-sync-result": {
                    "user-sync": [
                        {
                            "email": "course-admin@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-grader@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-other@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-owner@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-student@test.edulinq.org",
                            "skipped": true
                        }
                    ],
                    "assignment-sync": {
                        "synced-assignments": [],
                        "ambiguous-matches": [],
                        "non-matched-assignments": [],
                        "unchanged-assignments": []
                    }
                },
                "built-assignment-images": [
                    "autograder.course101.hw0"
                ],
                "assignment-template-files": {
                    "hw0": [
                        "submission.py"
                    ]
                }
            }
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/admin/update\",\"files\":[]}": {
        "endpoint": "courses/admin/update",
        "module_name": "autograder.api.courses.admin.update",
        "arguments": {},
        "output": {
            "result": {
                "course-id": "course101",
                "success": true,
                "message": "",
                "created": false,
                "updated": true,
                "lms-sync-result": {
                    "user-sync": [
                        {
                            "email": "course-admin@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-grader@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-other@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-owner@test.edulinq.org",
                            "skipped": true
                        },
                        {
                            "email": "course-student@test.edulinq.org",
                            "skipped": true
                        }
                    ],
                    "assignment-sync": {
                        "synced-assignments": [],
                        "ambiguous-matches": [],
                        "non-matched-assignments": [],
                        "unchanged-assignments": []
                    }
                },
                "built-assignment-images": [
                    "autograder.course101.hw0"
                ],
                "assignment-template-files": {
                    "hw0": [
                        "submission.py"
                    ]
                }
            }
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": false,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 2,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-score": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-file": null,
                "aggregate-submission-time-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": false,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": true,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 2,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-score": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-file": null,
                "aggregate-submission-time-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": true,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": true,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 2,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-score": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-file": null,
                "aggregate-submission-time-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": true,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": true,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 2,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-score": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code": {
                    "count": 2,
                    "mean": 4,
                    "median": 4,
                    "min": 4,
                    "max": 4
                },
                "aggregate-lines-of-code-per-file": {
                    "submission.py": {
                        "count": 2,
                        "mean": 4,
                        "median": 4,
                        "min": 4,
                        "max": 4
                    }
                },
                "aggregate-submission-time-delta": {
                    "count": 2,
                    "mean": 5000,
                    "median": 5000,
                    "min": 0,
                    "max": 10000
                },
                "aggregate-lines-of-code-delta": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 2,
                    "mean": 180,
                    "median": 180,
                    "min": 0,
                    "max": 360
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "short-id": "1697406256",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4
                },
                "course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                    "short-id": "1697406265",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "score": 1,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4,
                    "submission-time-delta": 10000,
                    "score-delta": 1,
                    "score-per-hour": 360
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": false,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": true,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 2,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-score": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code": {
                    "count": 2,
                    "mean": 4,
                    "median": 4,
                    "min": 4,
                    "max": 4
                },
                "aggregate-lines-of-code-per-file": {
                    "submission.py": {
                        "count": 2,
                        "mean": 4,
                        "median": 4,
                        "min": 4,
                        "max": 4
                    }
                },
                "aggregate-submission-time-delta": {
                    "count": 2,
                    "mean": 5000,
                    "median": 5000,
                    "min": 0,
                    "max": 10000
                },
                "aggregate-lines-of-code-delta": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 2,
                    "mean": 180,
                    "median": 180,
                    "min": 0,
                    "max": 360
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "short-id": "1697406256",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4
                },
                "course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                    "short-id": "1697406265",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "score": 1,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4,
                    "submission-time-delta": 10000,
                    "score-delta": 1,
                    "score-per-hour": 360
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": true,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": false,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 2,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-score": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-file": null,
                "aggregate-submission-time-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": true,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": false,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 2,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-score": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code": {
                    "count": 2,
                    "mean": 4,
                    "median": 4,
                    "min": 4,
                    "max": 4
                },
                "aggregate-lines-of-code-per-file": {
                    "submission.py": {
                        "count": 2,
                        "mean": 4,
                        "median": 4,
                        "min": 4,
                        "max": 4
                    }
                },
                "aggregate-submission-time-delta": {
                    "count": 2,
                    "mean": 5000,
                    "median": 5000,
                    "min": 0,
                    "max": 10000
                },
                "aggregate-lines-of-code-delta": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 2,
                    "mean": 180,
                    "median": 180,
                    "min": 0,
                    "max": 360
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "short-id": "1697406256",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4
                },
                "course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                    "short-id": "1697406265",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "score": 1,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4,
                    "submission-time-delta": 10000,
                    "score-delta": 1,
                    "score-per-hour": 360
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/individual\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/individual",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.individual",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": false,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 2,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-score": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code": {
                    "count": 2,
                    "mean": 4,
                    "median": 4,
                    "min": 4,
                    "max": 4
                },
                "aggregate-lines-of-code-per-file": {
                    "submission.py": {
                        "count": 2,
                        "mean": 4,
                        "median": 4,
                        "min": 4,
                        "max": 4
                    }
                },
                "aggregate-submission-time-delta": {
                    "count": 2,
                    "mean": 5000,
                    "median": 5000,
                    "min": 0,
                    "max": 10000
                },
                "aggregate-lines-of-code-delta": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-delta": {
                    "count": 2,
                    "mean": 0.5,
                    "median": 0.5,
                    "min": 0,
                    "max": 1
                },
                "aggregate-lines-of-code-per-hour": {
                    "count": 2,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                },
                "aggregate-score-per-hour": {
                    "count": 2,
                    "mean": 180,
                    "median": 180,
                    "min": 0,
                    "max": 360
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "short-id": "1697406256",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4
                },
                "course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                    "short-id": "1697406265",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user-email": "course-student@test.edulinq.org",
                    "submission-start-time": 1234567890123,
                    "score": 1,
                    "files": [
                        {
                            "filename": "submission.py",
                            "lines-of-code": 4
                        }
                    ],
                    "lines-of-code": 4,
                    "submission-time-delta": 10000,
                    "score-delta": 1,
                    "score-per-hour": 360
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": false,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 1,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-mean-similarities": null,
                "aggregate-total-mean-similarity": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": false,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": true,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 1,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-mean-similarities": null,
                "aggregate-total-mean-similarity": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": true,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": true,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 1,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-mean-similarities": null,
                "aggregate-total-mean-similarity": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": true,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": true,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 1,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-mean-similarities": {
                    "submission.py": {
                        "count": 1,
                        "mean": 0.13,
                        "median": 0.13,
                        "min": 0.13,
                        "max": 0.13
                    }
                },
                "aggregate-total-mean-similarity": {
                    "count": 1,
                    "mean": 0.13,
                    "median": 0.13,
                    "min": 0.13,
                    "max": 0.13
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-ids": "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265",
                    "similarities": {
                        "submission.py": [
                            {
                                "filename": "submission.py",
                                "tool": "fake",
                                "version": "0.0.1",
                                "score": 0.13
                            }
                        ]
                    },
                    "mean-similarities": {
                        "submission.py": 0.13
                    },
                    "total-mean-similarity": 0.13
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":true,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": true,
            "overwrite-records": false,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": true,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 1,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-mean-similarities": {
                    "submission.py": {
                        "count": 1,
                        "mean": 0.13,
                        "median": 0.13,
                        "min": 0.13,
                        "max": 0.13
                    }
                },
                "aggregate-total-mean-similarity": {
                    "count": 1,
                    "mean": 0.13,
                    "median": 0.13,
                    "min": 0.13,
                    "max": 0.13
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-ids": "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265",
                    "similarities": {
                        "submission.py": [
                            {
                                "filename": "submission.py",
                                "tool": "fake",
                                "version": "0.0.1",
                                "score": 0.13
                            }
                        ]
                    },
                    "mean-similarities": {
                        "submission.py": 0.13
                    },
                    "total-mean-similarity": 0.13
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": true,
            "wait-for-completion": false
        },
        "output": {
            "complete": false,
            "options": {
                "dry-run": false,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": false
            },
            "summary": {
                "complete": false,
                "complete-count": 0,
                "pending-count": 1,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 0,
                "last-timestamp": 0,
                "aggregate-mean-similarities": null,
                "aggregate-total-mean-similarity": {
                    "count": 0,
                    "mean": 0,
                    "median": 0,
                    "min": 0,
                    "max": 0
                }
            },
            "results": {},
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":true,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": true,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": false,
                "overwrite-records": true,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 1,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-mean-similarities": {
                    "submission.py": {
                        "count": 1,
                        "mean": 0.13,
                        "median": 0.13,
                        "min": 0.13,
                        "max": 0.13
                    }
                },
                "aggregate-total-mean-similarity": {
                    "count": 1,
                    "mean": 0.13,
                    "median": 0.13,
                    "min": 0.13,
                    "max": 0.13
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-ids": "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265",
                    "similarities": {
                        "submission.py": [
                            {
                                "filename": "submission.py",
                                "tool": "fake",
                                "version": "0.0.1",
                                "score": 0.13
                            }
                        ]
                    },
                    "mean-similarities": {
                        "submission.py": 0.13
                    },
                    "total-mean-similarity": 0.13
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"overwrite-records\":false,\"submissions\":[\"course101::hw0::course-student@test.edulinq.org::1697406256\",\"course101::hw0::course-student@test.edulinq.org::1697406265\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/analysis/pairwise\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/analysis/pairwise",
        "module_name": "autograder.api.courses.assignments.submissions.analysis.pairwise",
        "arguments": {
            "submissions": [
                "course101::hw0::course-student@test.edulinq.org::1697406256",
                "course101::hw0::course-student@test.edulinq.org::1697406265"
            ],
            "dry-run": false,
            "overwrite-records": false,
            "wait-for-completion": true
        },
        "output": {
            "complete": true,
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "submissions": [
                    "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "course101::hw0::course-student@test.edulinq.org::1697406265"
                ],
                "wait-for-completion": true
            },
            "summary": {
                "complete": true,
                "complete-count": 1,
                "pending-count": 0,
                "error-count": 0,
                "failure-count": 0,
                "first-timestamp": 1234567890123,
                "last-timestamp": 1234567890123,
                "aggregate-mean-similarities": {
                    "submission.py": {
                        "count": 1,
                        "mean": 0.13,
                        "median": 0.13,
                        "min": 0.13,
                        "max": 0.13
                    }
                },
                "aggregate-total-mean-similarity": {
                    "count": 1,
                    "mean": 0.13,
                    "median": 0.13,
                    "min": 0.13,
                    "max": 0.13
                }
            },
            "results": {
                "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265": {
                    "options": {
                        "include-patterns": [
                            "submission.py"
                        ],
                        "template-files": [
                            {
                                "type": "path",
                                "path": "test-submissions/not_implemented/submission.py"
                            }
                        ]
                    },
                    "analysis-timestamp": 1234567890123,
                    "submission-ids": "course101::hw0::course-student@test.edulinq.org::1697406256||course101::hw0::course-student@test.edulinq.org::1697406265",
                    "similarities": {
                        "submission.py": [
                            {
                                "filename": "submission.py",
                                "tool": "fake",
                                "version": "0.0.1",
                                "score": 0.13
                            }
                        ]
                    },
                    "mean-similarities": {
                        "submission.py": 0.13
                    },
                    "total-mean-similarity": 0.13
                }
            },
            "work-errors": {}
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-users\":[\"*\",\"-student\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/course/attempts\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/course/attempts",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.course.attempts",
        "arguments": {
            "target-users": [
                "*",
                "-student"
            ]
        },
        "output": {
            "grading-results": {
                "course-admin@test.edulinq.org": null,
                "course-grader@test.edulinq.org": null,
                "course-other@test.edulinq.org": null,
                "course-owner@test.edulinq.org": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/course/attempts\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/course/attempts",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.course.attempts",
        "arguments": {},
        "output": {
            "grading-results": {
                "course-admin@test.edulinq.org": null,
                "course-grader@test.edulinq.org": null,
                "course-other@test.edulinq.org": null,
                "course-owner@test.edulinq.org": null,
                "course-student@test.edulinq.org": {
                    "info": {
                        "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                        "short-id": "1697406272",
                        "course-id": "course101",
                        "assignment-id": "hw0",
                        "user": "course-student@test.edulinq.org",
                        "message": "",
                        "max_points": 2,
                        "score": 2,
                        "name": "HW0",
                        "questions": [
                            {
                                "name": "Q1",
                                "max_points": 1,
                                "score": 1,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            },
                            {
                                "name": "Q2",
                                "max_points": 1,
                                "score": 1,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            },
                            {
                                "name": "Style",
                                "max_points": 0,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "Style is clean!",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            }
                        ],
                        "grading_start_time": 1697406273000,
                        "grading_end_time": 1697406273000,
                        "additional-info": null
                    },
                    "input-files-gzip": {
                        "submission.py": "H4sICAAAAAAA/3N1Ym1pc3Npb24ucHkASklNU0grzUsuyczPM9TQtOJSUFBQKEotKS3KUwgpKk3l4kJWYaRRlpiDqqgsMUdBW8GQCxAAAP//PpwmbkkAAAA="
                    },
                    "output-files-gzip": {
                        "result.json": "H4sICAAAAAAA/3Jlc3VsdC5qc29uAMSSvQqDMBSFd5/iNrNDDPUnPkHX0qFDKRI0SEBja1JoEd+9mIptg1YyNdPl3HPO5YN0HgAAkqzmKAW0O2Lkv6TrjSstGqlQCicjDa+bpq/cPhhj06Zm9+zSCKmHfGAtVd60fEavuVKsNI12X9myQsgyU5q1OtPC3A0iSuMtTggJKVkIcFnM2id376/Skb/ThW50oQPdQT8q/hMQLwDa+gegKQWhIK84kxtn3sSFNyLxm9dM5/ETr97BlnGhn3q99wwAAP//PProBisDAAA="
                    },
                    "stdout": "Autograder transcript for assignment: HW0.\nGrading started at 2023-11-11 22:13 and ended at 2023-11-11 22:13.\nQ1: 1 / 1\nQ2: 1 / 1\nStyle: 0 / 0\n   Style is clean!\n\nTotal: 2 / 2\n",
                    "stderr": ""
                }
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-users\":[\"student\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/course/attempts\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/course/attempts",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.course.attempts",
        "arguments": {
            "target-users": [
                "student"
            ]
        },
        "output": {
            "grading-results": {
                "course-student@test.edulinq.org": {
                    "info": {
                        "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                        "short-id": "1697406272",
                        "course-id": "course101",
                        "assignment-id": "hw0",
                        "user": "course-student@test.edulinq.org",
                        "message": "",
                        "max_points": 2,
                        "score": 2,
                        "name": "HW0",
                        "questions": [
                            {
                                "name": "Q1",
                                "max_points": 1,
                                "score": 1,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            },
                            {
                                "name": "Q2",
                                "max_points": 1,
                                "score": 1,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            },
                            {
                                "name": "Style",
                                "max_points": 0,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "Style is clean!",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            }
                        ],
                        "grading_start_time": 1697406273000,
                        "grading_end_time": 1697406273000,
                        "additional-info": null
                    },
                    "input-files-gzip": {
                        "submission.py": "H4sICAAAAAAA/3N1Ym1pc3Npb24ucHkASklNU0grzUsuyczPM9TQtOJSUFBQKEotKS3KUwgpKk3l4kJWYaRRlpiDqqgsMUdBW8GQCxAAAP//PpwmbkkAAAA="
                    },
                    "output-files-gzip": {
                        "result.json": "H4sICAAAAAAA/3Jlc3VsdC5qc29uAMSSvQqDMBSFd5/iNrNDDPUnPkHX0qFDKRI0SEBja1JoEd+9mIptg1YyNdPl3HPO5YN0HgAAkqzmKAW0O2Lkv6TrjSstGqlQCicjDa+bpq/cPhhj06Zm9+zSCKmHfGAtVd60fEavuVKsNI12X9myQsgyU5q1OtPC3A0iSuMtTggJKVkIcFnM2id376/Skb/ThW50oQPdQT8q/hMQLwDa+gegKQWhIK84kxtn3sSFNyLxm9dM5/ETr97BlnGhn3q99wwAAP//PProBisDAAA="
                    },
                    "stdout": "Autograder transcript for assignment: HW0.\nGrading started at 2023-11-11 22:13 and ended at 2023-11-11 22:13.\nQ1: 1 / 1\nQ2: 1 / 1\nStyle: 0 / 0\n   Style is clean!\n\nTotal: 2 / 2\n",
                    "stderr": ""
                }
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-users\":[\"*\",\"-student\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/course/scores\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/course/scores",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.course.scores",
        "arguments": {
            "target-users": [
                "*",
                "-student"
            ]
        },
        "output": {
            "submission-infos": {
                "course-admin@test.edulinq.org": null,
                "course-grader@test.edulinq.org": null,
                "course-other@test.edulinq.org": null,
                "course-owner@test.edulinq.org": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/course/scores\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/course/scores",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.course.scores",
        "arguments": {},
        "output": {
            "submission-infos": {
                "course-admin@test.edulinq.org": null,
                "course-grader@test.edulinq.org": null,
                "course-other@test.edulinq.org": null,
                "course-owner@test.edulinq.org": null,
                "course-student@test.edulinq.org": {
                    "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                    "short-id": "1697406272",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 2,
                    "grading_start_time": 1697406273000
                }
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-users\":[\"student\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/course/scores\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/course/scores",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.course.scores",
        "arguments": {
            "target-users": [
                "student"
            ]
        },
        "output": {
            "submission-infos": {
                "course-student@test.edulinq.org": {
                    "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                    "short-id": "1697406272",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 2,
                    "grading_start_time": 1697406273000
                }
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempt\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempt",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempt",
        "arguments": {
            "target-email": "ZZZ"
        },
        "output": {
            "found-user": false,
            "found-submission": false,
            "grading-result": null
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempt\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempt",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempt",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "found-submission": true,
            "grading-result": {
                "info": {
                    "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                    "short-id": "1697406272",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 2,
                    "name": "HW0",
                    "questions": [
                        {
                            "name": "Q1",
                            "max_points": 1,
                            "score": 1,
                            "hard_fail": false,
                            "skipped": false,
                            "message": "",
                            "grading_start_time": 1697406273000,
                            "grading_end_time": 1697406273000
                        },
                        {
                            "name": "Q2",
                            "max_points": 1,
                            "score": 1,
                            "hard_fail": false,
                            "skipped": false,
                            "message": "",
                            "grading_start_time": 1697406273000,
                            "grading_end_time": 1697406273000
                        },
                        {
                            "name": "Style",
                            "max_points": 0,
                            "score": 0,
                            "hard_fail": false,
                            "skipped": false,
                            "message": "Style is clean!",
                            "grading_start_time": 1697406273000,
                            "grading_end_time": 1697406273000
                        }
                    ],
                    "grading_start_time": 1697406273000,
                    "grading_end_time": 1697406273000,
                    "additional-info": null
                },
                "input-files-gzip": {
                    "submission.py": "H4sICAAAAAAA/3N1Ym1pc3Npb24ucHkASklNU0grzUsuyczPM9TQtOJSUFBQKEotKS3KUwgpKk3l4kJWYaRRlpiDqqgsMUdBW8GQCxAAAP//PpwmbkkAAAA="
                },
                "output-files-gzip": {
                    "result.json": "H4sICAAAAAAA/3Jlc3VsdC5qc29uAMSSvQqDMBSFd5/iNrNDDPUnPkHX0qFDKRI0SEBja1JoEd+9mIptg1YyNdPl3HPO5YN0HgAAkqzmKAW0O2Lkv6TrjSstGqlQCicjDa+bpq/cPhhj06Zm9+zSCKmHfGAtVd60fEavuVKsNI12X9myQsgyU5q1OtPC3A0iSuMtTggJKVkIcFnM2id376/Skb/ThW50oQPdQT8q/hMQLwDa+gegKQWhIK84kxtn3sSFNyLxm9dM5/ETr97BlnGhn3q99wwAAP//PProBisDAAA="
                },
                "stdout": "Autograder transcript for assignment: HW0.\nGrading started at 2023-11-11 22:13 and ended at 2023-11-11 22:13.\nQ1: 1 / 1\nQ2: 1 / 1\nStyle: 0 / 0\n   Style is clean!\n\nTotal: 2 / 2\n",
                "stderr": ""
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"target-submission\":\"1697406265\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempt\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempt",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempt",
        "arguments": {
            "target-email": "course-student@test.edulinq.org",
            "target-submission": "1697406265"
        },
        "output": {
            "found-user": true,
            "found-submission": true,
            "grading-result": {
                "info": {
                    "id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                    "short-id": "1697406265",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 1,
                    "name": "HW0",
                    "questions": [
                        {
                            "name": "Q1",
                            "max_points": 1,
                            "score": 1,
                            "hard_fail": false,
                            "skipped": false,
                            "message": "",
                            "grading_start_time": 1697406266000,
                            "grading_end_time": 1697406266000
                        },
                        {
                            "name": "Q2",
                            "max_points": 1,
                            "score": 0,
                            "hard_fail": false,
                            "skipped": false,
                            "message": "NotImplemented returned.",
                            "grading_start_time": 1697406266000,
                            "grading_end_time": 1697406266000
                        },
                        {
                            "name": "Style",
                            "max_points": 0,
                            "score": 0,
                            "hard_fail": false,
                            "skipped": false,
                            "message": "Style is clean!",
                            "grading_start_time": 1697406266000,
                            "grading_end_time": 1697406266000
                        }
                    ],
                    "grading_start_time": 1697406266000,
                    "grading_end_time": 1697406266000,
                    "additional-info": null
                },
                "input-files-gzip": {
                    "submission.py": "H4sICAAAAAAA/3N1Ym1pc3Npb24ucHkASklNU0grzUsuyczPM9TQtOJSUFBQKEotKS3KUwgpKk3l4kJWYaRRlpiDqsgvv8QztyAnNTc1ryQ1hQsQAAD//6rUxttQAAAA"
                },
                "output-files-gzip": {
                    "result.json": "H4sICAAAAAAA/3Jlc3VsdC5qc29uAJySzWrDMBCE736Krc6hSE5/7DxBeymUHnooxYhoMQJrlUobaAl59xI1uFTEcRWfltmZMd+iXQUAIEg7FCsQD69SLH6kjy1Gtp6iWMFbkg7fbpz+5J7VMTZunP7sNt4SH/IqW8a1D3hCdxij7lNj3tcHbSz1XWQduGOb/qvu2vb+Rja1atvbiQCSOWkf3fvFLF19EZ2cpnvy/Og2AzokRgMBeRsIzXUxdVNG3RRQv/DXgGfBc8B/gKdSsBHWA2q6KuOtpcxvfY63lkv5y5um9+Pjnr3rMjNO9KtqX30HAAD//xSSgptDAwAA"
                },
                "stdout": "Autograder transcript for assignment: HW0.\nGrading started at 2023-11-11 22:13 and ended at 2023-11-11 22:13.\nQ1: 1 / 1\nQ2: 0 / 1\n   NotImplemented returned.\nStyle: 0 / 0\n   Style is clean!\n\nTotal: 1 / 2\n",
                "stderr": ""
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempt\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempt",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempt",
        "arguments": {},
        "output": {
            "found-user": true,
            "found-submission": false,
            "grading-result": null
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-grader@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempts\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempts",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempts",
        "arguments": {
            "target-email": "course-grader@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "grading-results": []
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempts\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempts",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempts",
        "arguments": {
            "target-email": "ZZZ@test.edulinq.org"
        },
        "output": {
            "found-user": false,
            "grading-results": []
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempts\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempts",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempts",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "grading-results": [
                {
                    "info": {
                        "id": "course101::hw0::course-student@test.edulinq.org::1697406256",
                        "short-id": "1697406256",
                        "course-id": "course101",
                        "assignment-id": "hw0",
                        "user": "course-student@test.edulinq.org",
                        "message": "",
                        "max_points": 2,
                        "score": 0,
                        "name": "HW0",
                        "questions": [
                            {
                                "name": "Q1",
                                "max_points": 1,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "NotImplemented returned.",
                                "grading_start_time": 1697406256000,
                                "grading_end_time": 1697406256000
                            },
                            {
                                "name": "Q2",
                                "max_points": 1,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "NotImplemented returned.",
                                "grading_start_time": 1697406256000,
                                "grading_end_time": 1697406256000
                            },
                            {
                                "name": "Style",
                                "max_points": 0,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "Style is clean!",
                                "grading_start_time": 1697406256000,
                                "grading_end_time": 1697406256000
                            }
                        ],
                        "grading_start_time": 1697406256000,
                        "grading_end_time": 1697406256000,
                        "additional-info": null
                    },
                    "input-files-gzip": {
                        "submission.py": "H4sICAAAAAAA/3N1Ym1pc3Npb24ucHkASklNU0grzUsuyczPM9TQtOJSUFBQKEotKS3KU/DLL/HMLchJzU3NK0lN4eJCVmukUZaYg1c5IAAA//8hrjgTWgAAAA=="
                    },
                    "output-files-gzip": {
                        "result.json": "H4sICAAAAAAA/3Jlc3VsdC5qc29uAMySwWrDMAyG73kKzecy4rRrkz7BdhmMHXYYI5haBEMsd7YKG6XvPuIlGTFsWW7NSUj/J+UDnzMAAEHKotiDuH/Jxeq79X7CwMZREHt4ja3uO4/VhHuSPTZOrPqoj84Qd7xMhuHgfMflKYQhqCZufHT8YI8tWiRGDR755An1bXqn8UobaurAynPNJv6P3FbVbpOXhVxX6Y0BQNJDXEzyYsxfVrPexdV6r+e9J/EF1s/82eKf4qngP8TjUjABDi0qulnsu13iuynufnxj9dY/+7k7ZZkEf9m/yy7ZVwAAAP//do3jyV0DAAA="
                    },
                    "stdout": "Autograder transcript for assignment: HW0.\nGrading started at 2023-11-11 22:13 and ended at 2023-11-11 22:13.\nQ1: 0 / 1\n   NotImplemented returned.\nQ2: 0 / 1\n   NotImplemented returned.\nStyle: 0 / 0\n   Style is clean!\n\nTotal: 0 / 2\n",
                    "stderr": "Dummy Stderr\n"
                },
                {
                    "info": {
                        "id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                        "short-id": "1697406265",
                        "course-id": "course101",
                        "assignment-id": "hw0",
                        "user": "course-student@test.edulinq.org",
                        "message": "",
                        "max_points": 2,
                        "score": 1,
                        "name": "HW0",
                        "questions": [
                            {
                                "name": "Q1",
                                "max_points": 1,
                                "score": 1,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "",
                                "grading_start_time": 1697406266000,
                                "grading_end_time": 1697406266000
                            },
                            {
                                "name": "Q2",
                                "max_points": 1,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "NotImplemented returned.",
                                "grading_start_time": 1697406266000,
                                "grading_end_time": 1697406266000
                            },
                            {
                                "name": "Style",
                                "max_points": 0,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "Style is clean!",
                                "grading_start_time": 1697406266000,
                                "grading_end_time": 1697406266000
                            }
                        ],
                        "grading_start_time": 1697406266000,
                        "grading_end_time": 1697406266000,
                        "additional-info": null
                    },
                    "input-files-gzip": {
                        "submission.py": "H4sICAAAAAAA/3N1Ym1pc3Npb24ucHkASklNU0grzUsuyczPM9TQtOJSUFBQKEotKS3KUwgpKk3l4kJWYaRRlpiDqsgvv8QztyAnNTc1ryQ1hQsQAAD//6rUxttQAAAA"
                    },
                    "output-files-gzip": {
                        "result.json": "H4sICAAAAAAA/3Jlc3VsdC5qc29uAJySzWrDMBCE736Krc6hSE5/7DxBeymUHnooxYhoMQJrlUobaAl59xI1uFTEcRWfltmZMd+iXQUAIEg7FCsQD69SLH6kjy1Gtp6iWMFbkg7fbpz+5J7VMTZunP7sNt4SH/IqW8a1D3hCdxij7lNj3tcHbSz1XWQduGOb/qvu2vb+Rja1atvbiQCSOWkf3fvFLF19EZ2cpnvy/Og2AzokRgMBeRsIzXUxdVNG3RRQv/DXgGfBc8B/gKdSsBHWA2q6KuOtpcxvfY63lkv5y5um9+Pjnr3rMjNO9KtqX30HAAD//xSSgptDAwAA"
                    },
                    "stdout": "Autograder transcript for assignment: HW0.\nGrading started at 2023-11-11 22:13 and ended at 2023-11-11 22:13.\nQ1: 1 / 1\nQ2: 0 / 1\n   NotImplemented returned.\nStyle: 0 / 0\n   Style is clean!\n\nTotal: 1 / 2\n",
                    "stderr": ""
                },
                {
                    "info": {
                        "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                        "short-id": "1697406272",
                        "course-id": "course101",
                        "assignment-id": "hw0",
                        "user": "course-student@test.edulinq.org",
                        "message": "",
                        "max_points": 2,
                        "score": 2,
                        "name": "HW0",
                        "questions": [
                            {
                                "name": "Q1",
                                "max_points": 1,
                                "score": 1,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            },
                            {
                                "name": "Q2",
                                "max_points": 1,
                                "score": 1,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            },
                            {
                                "name": "Style",
                                "max_points": 0,
                                "score": 0,
                                "hard_fail": false,
                                "skipped": false,
                                "message": "Style is clean!",
                                "grading_start_time": 1697406273000,
                                "grading_end_time": 1697406273000
                            }
                        ],
                        "grading_start_time": 1697406273000,
                        "grading_end_time": 1697406273000,
                        "additional-info": null
                    },
                    "input-files-gzip": {
                        "submission.py": "H4sICAAAAAAA/3N1Ym1pc3Npb24ucHkASklNU0grzUsuyczPM9TQtOJSUFBQKEotKS3KUwgpKk3l4kJWYaRRlpiDqqgsMUdBW8GQCxAAAP//PpwmbkkAAAA="
                    },
                    "output-files-gzip": {
                        "result.json": "H4sICAAAAAAA/3Jlc3VsdC5qc29uAMSSvQqDMBSFd5/iNrNDDPUnPkHX0qFDKRI0SEBja1JoEd+9mIptg1YyNdPl3HPO5YN0HgAAkqzmKAW0O2Lkv6TrjSstGqlQCicjDa+bpq/cPhhj06Zm9+zSCKmHfGAtVd60fEavuVKsNI12X9myQsgyU5q1OtPC3A0iSuMtTggJKVkIcFnM2id376/Skb/ThW50oQPdQT8q/hMQLwDa+gegKQWhIK84kxtn3sSFNyLxm9dM5/ETr97BlnGhn3q99wwAAP//PProBisDAAA="
                    },
                    "stdout": "Autograder transcript for assignment: HW0.\nGrading started at 2023-11-11 22:13 and ended at 2023-11-11 22:13.\nQ1: 1 / 1\nQ2: 1 / 1\nStyle: 0 / 0\n   Style is clean!\n\nTotal: 2 / 2\n",
                    "stderr": ""
                }
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/attempts\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/attempts",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.attempts",
        "arguments": {},
        "output": {
            "found-user": true,
            "grading-results": []
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/history\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/history",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.history",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "history": [
                {
                    "id": "course101::hw0::course-student@test.edulinq.org::1697406256",
                    "short-id": "1697406256",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 0,
                    "grading_start_time": 1697406256000
                },
                {
                    "id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                    "short-id": "1697406265",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 1,
                    "grading_start_time": 1697406266000
                },
                {
                    "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                    "short-id": "1697406272",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 2,
                    "grading_start_time": 1697406273000
                }
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-other@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/history\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/history",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.history",
        "arguments": {
            "target-email": "course-other@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "history": []
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/history\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/history",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.history",
        "arguments": {
            "target-email": "ZZZ"
        },
        "output": {
            "found-user": false,
            "history": []
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/history\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/history",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.history",
        "arguments": {},
        "output": {
            "found-user": true,
            "history": []
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/peek\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/peek",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.peek",
        "arguments": {
            "target-email": "ZZZ"
        },
        "output": {
            "found-user": false,
            "found-submission": false,
            "submission-result": null
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/peek\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/peek",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.peek",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "found-submission": true,
            "submission-result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1697406272",
                "short-id": "1697406272",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 2,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1697406273000,
                        "grading_end_time": 1697406273000
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1697406273000,
                        "grading_end_time": 1697406273000
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1697406273000,
                        "grading_end_time": 1697406273000
                    }
                ],
                "grading_start_time": 1697406273000,
                "grading_end_time": 1697406273000,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"target-submission\":\"1697406265\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/peek\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/peek",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.peek",
        "arguments": {
            "target-email": "course-student@test.edulinq.org",
            "target-submission": "1697406265"
        },
        "output": {
            "found-user": true,
            "found-submission": true,
            "submission-result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1697406265",
                "short-id": "1697406265",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 1,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1697406266000,
                        "grading_end_time": 1697406266000
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "NotImplemented returned.",
                        "grading_start_time": 1697406266000,
                        "grading_end_time": 1697406266000
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1697406266000,
                        "grading_end_time": 1697406266000
                    }
                ],
                "grading_start_time": 1697406266000,
                "grading_end_time": 1697406266000,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/fetch/user/peek\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/fetch/user/peek",
        "module_name": "autograder.api.courses.assignments.submissions.fetch.user.peek",
        "arguments": {},
        "output": {
            "found-user": true,
            "found-submission": false,
            "submission-result": null
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"dry-run\":false,\"overwrite-records\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/proxy/regrade\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/regrade",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.regrade",
        "arguments": {
            "dry-run": false,
            "overwrite-records": false,
            "wait-for-completion": false
        },
        "output": {
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "wait-for-completion": false,
                "target-users": [
                    "*"
                ],
                "regrade-cutoff": 1234567890123
            },
            "results": {},
            "work-errors": {},
            "complete": false,
            "resolved-users": [
                "course-admin@test.edulinq.org",
                "course-grader@test.edulinq.org",
                "course-other@test.edulinq.org",
                "course-owner@test.edulinq.org",
                "course-student@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"dry-run\":true,\"overwrite-records\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/proxy/regrade\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/regrade",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.regrade",
        "arguments": {
            "dry-run": true,
            "overwrite-records": false,
            "wait-for-completion": false
        },
        "output": {
            "options": {
                "dry-run": true,
                "overwrite-records": false,
                "wait-for-completion": false,
                "target-users": [
                    "*"
                ],
                "regrade-cutoff": 1234567890123
            },
            "results": {},
            "work-errors": {},
            "complete": false,
            "resolved-users": [
                "course-admin@test.edulinq.org",
                "course-grader@test.edulinq.org",
                "course-other@test.edulinq.org",
                "course-owner@test.edulinq.org",
                "course-student@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"dry-run\":false,\"overwrite-records\":false,\"target-users\":[\"*\",\"-course-admin@test.edulinq.org\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/proxy/regrade\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/regrade",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.regrade",
        "arguments": {
            "dry-run": false,
            "overwrite-records": false,
            "target-users": [
                "*",
                "-course-admin@test.edulinq.org"
            ],
            "wait-for-completion": false
        },
        "output": {
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "wait-for-completion": false,
                "target-users": [
                    "*",
                    "-course-admin@test.edulinq.org"
                ],
                "regrade-cutoff": 1234567890123
            },
            "results": {},
            "work-errors": {},
            "complete": false,
            "resolved-users": [
                "course-grader@test.edulinq.org",
                "course-other@test.edulinq.org",
                "course-owner@test.edulinq.org",
                "course-student@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"dry-run\":false,\"overwrite-records\":true,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/proxy/regrade\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/regrade",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.regrade",
        "arguments": {
            "dry-run": false,
            "overwrite-records": true,
            "wait-for-completion": false
        },
        "output": {
            "options": {
                "dry-run": false,
                "overwrite-records": true,
                "wait-for-completion": false,
                "target-users": [
                    "*"
                ],
                "regrade-cutoff": 1234567890123
            },
            "results": {},
            "work-errors": {},
            "complete": false,
            "resolved-users": [
                "course-admin@test.edulinq.org",
                "course-grader@test.edulinq.org",
                "course-other@test.edulinq.org",
                "course-owner@test.edulinq.org",
                "course-student@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"dry-run\":false,\"overwrite-records\":false,\"target-users\":[\"student\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/proxy/regrade\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/regrade",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.regrade",
        "arguments": {
            "dry-run": false,
            "overwrite-records": false,
            "target-users": [
                "student"
            ],
            "wait-for-completion": false
        },
        "output": {
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "wait-for-completion": false,
                "target-users": [
                    "student"
                ],
                "regrade-cutoff": 1234567890123
            },
            "results": {},
            "work-errors": {},
            "complete": false,
            "resolved-users": [
                "course-student@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"dry-run\":false,\"overwrite-records\":false,\"regrade-cutoff\":0,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":false},\"endpoint\":\"courses/assignments/submissions/proxy/regrade\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/regrade",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.regrade",
        "arguments": {
            "dry-run": false,
            "overwrite-records": false,
            "regrade-cutoff": 0,
            "wait-for-completion": false
        },
        "output": {
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "wait-for-completion": false,
                "target-users": [
                    "*"
                ],
                "regrade-cutoff": 0
            },
            "results": {
                "course-student@test.edulinq.org": {
                    "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                    "short-id": "1234567890",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 2,
                    "grading_start_time": 1234567890123
                }
            },
            "work-errors": {},
            "complete": false,
            "resolved-users": [
                "course-admin@test.edulinq.org",
                "course-grader@test.edulinq.org",
                "course-other@test.edulinq.org",
                "course-owner@test.edulinq.org",
                "course-student@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"dry-run\":false,\"overwrite-records\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"wait-for-completion\":true},\"endpoint\":\"courses/assignments/submissions/proxy/regrade\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/regrade",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.regrade",
        "arguments": {
            "dry-run": false,
            "overwrite-records": false,
            "wait-for-completion": true
        },
        "output": {
            "options": {
                "dry-run": false,
                "overwrite-records": false,
                "wait-for-completion": true,
                "target-users": [
                    "*"
                ],
                "regrade-cutoff": 1234567890123
            },
            "results": {
                "course-admin@test.edulinq.org": null,
                "course-grader@test.edulinq.org": null,
                "course-other@test.edulinq.org": null,
                "course-owner@test.edulinq.org": null,
                "course-student@test.edulinq.org": {
                    "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                    "short-id": "1234567890",
                    "course-id": "course101",
                    "assignment-id": "hw0",
                    "user": "course-student@test.edulinq.org",
                    "message": "",
                    "max_points": 2,
                    "score": 2,
                    "grading_start_time": 1234567890123
                }
            },
            "work-errors": {},
            "complete": true,
            "resolved-users": [
                "course-admin@test.edulinq.org",
                "course-grader@test.edulinq.org",
                "course-other@test.edulinq.org",
                "course-owner@test.edulinq.org",
                "course-student@test.edulinq.org"
            ]
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/resubmit\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/resubmit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.resubmit",
        "arguments": {
            "proxy-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "found-submission": true,
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "proxy-user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 2,
                "proxy_start_time": 1234567890123,
                "proxy_end_time": 1234567890123,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 1234567890123,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"course-student@test.edulinq.org\",\"target-submission\":\"ZZZ\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/resubmit\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/resubmit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.resubmit",
        "arguments": {
            "proxy-email": "course-student@test.edulinq.org",
            "target-submission": "ZZZ"
        },
        "output": {
            "found-user": true,
            "found-submission": false,
            "rejected": false,
            "message": "",
            "grading-success": false,
            "result": null
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"zzz@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/resubmit\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/resubmit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.resubmit",
        "arguments": {
            "proxy-email": "zzz@test.edulinq.org"
        },
        "output": {
            "found-user": false,
            "found-submission": false,
            "rejected": false,
            "message": "",
            "grading-success": false,
            "result": null
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"course-student@test.edulinq.org\",\"target-submission\":\"1697406256\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/resubmit\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/resubmit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.resubmit",
        "arguments": {
            "proxy-email": "course-student@test.edulinq.org",
            "target-submission": "1697406256"
        },
        "output": {
            "found-user": true,
            "found-submission": true,
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "proxy-user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 0,
                "proxy_start_time": 1234567890123,
                "proxy_end_time": 1234567890123,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "NotImplemented returned.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "NotImplemented returned.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 1234567890123,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"course-student@test.edulinq.org\",\"proxy-time\":999999999999,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/resubmit\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/proxy/resubmit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.resubmit",
        "arguments": {
            "proxy-email": "course-student@test.edulinq.org",
            "proxy-time": 999999999999
        },
        "output": {
            "found-user": true,
            "found-submission": true,
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "proxy-user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 2,
                "proxy_start_time": 1234567890123,
                "proxy_end_time": 1234567890123,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 999999999999,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/submit\",\"files\":[\"__DATA_DIR__(hw0_solution.py)\"]}": {
        "endpoint": "courses/assignments/submissions/proxy/submit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.submit",
        "arguments": {
            "proxy-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "proxy-user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 2,
                "proxy_start_time": 1234567890123,
                "proxy_end_time": 1234567890123,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 1234567890123,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"zzz@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/submit\",\"files\":[\"__DATA_DIR__(hw0_solution.py)\"]}": {
        "endpoint": "courses/assignments/submissions/proxy/submit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.submit",
        "arguments": {
            "proxy-email": "zzz@test.edulinq.org"
        },
        "output": {
            "found-user": false,
            "rejected": false,
            "message": "",
            "grading-success": false,
            "result": null
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/submit\",\"files\":[\"__DATA_DIR__(hw0_no_compile.py)\"]}": {
        "endpoint": "courses/assignments/submissions/proxy/submit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.submit",
        "arguments": {
            "proxy-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "proxy-user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 0,
                "proxy_start_time": 1234567890123,
                "proxy_end_time": 1234567890123,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Submission could not be graded.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Submission could not be graded.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Submission could not be graded.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 1234567890123,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"proxy-email\":\"course-student@test.edulinq.org\",\"proxy-time\":999999999999,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/proxy/submit\",\"files\":[\"__DATA_DIR__(hw0_solution.py)\"]}": {
        "endpoint": "courses/assignments/submissions/proxy/submit",
        "module_name": "autograder.api.courses.assignments.submissions.proxy.submit",
        "arguments": {
            "proxy-email": "course-student@test.edulinq.org",
            "proxy-time": 999999999999
        },
        "output": {
            "found-user": true,
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-student@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-student@test.edulinq.org",
                "proxy-user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 2,
                "proxy_start_time": 1234567890123,
                "proxy_end_time": 1234567890123,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 999999999999,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/remove\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/remove",
        "module_name": "autograder.api.courses.assignments.submissions.remove",
        "arguments": {
            "target-email": "ZZZ"
        },
        "output": {
            "found-user": false,
            "found-submission": false
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/remove\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/remove",
        "module_name": "autograder.api.courses.assignments.submissions.remove",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true,
            "found-submission": true
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"target-submission\":\"1697406265\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/remove\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/remove",
        "module_name": "autograder.api.courses.assignments.submissions.remove",
        "arguments": {
            "target-email": "course-student@test.edulinq.org",
            "target-submission": "1697406265"
        },
        "output": {
            "found-user": true,
            "found-submission": true
        }
    },
    "{\"arguments\":{\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/remove\",\"files\":[]}": {
        "endpoint": "courses/assignments/submissions/remove",
        "module_name": "autograder.api.courses.assignments.submissions.remove",
        "arguments": {},
        "output": {
            "found-user": true,
            "found-submission": false
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/report\",\"files\":[]}": {
        "endpoint": "courses/assignments/report",
        "module_name": "autograder.api.courses.assignments.report",
        "arguments": {},
        "output": {
            "course-report": {
                "course-name": "Course 101",
                "assignments": [
                    {
                        "assignment-name": "Homework 0",
                        "number-of-submissions": 1,
                        "latest-submission": 1697406273000,
                        "questions": [
                            {
                                "question-name": "Q1",
                                "min": 1,
                                "max": 1,
                                "median": 1,
                                "mean": 1,
                                "standard-deviation": -1
                            },
                            {
                                "question-name": "Q2",
                                "min": 1,
                                "max": 1,
                                "median": 1,
                                "mean": 1,
                                "standard-deviation": -1
                            },
                            {
                                "question-name": "Style",
                                "min": 0,
                                "max": 0,
                                "median": 0,
                                "mean": 0,
                                "standard-deviation": -1
                            },
                            {
                                "question-name": "<Overall>",
                                "min": 1,
                                "max": 1,
                                "median": 1,
                                "mean": 1,
                                "standard-deviation": -1
                            }
                        ]
                    }
                ]
            }
        }
    },
    "{\"arguments\":{\"allow-late\":false,\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/submit\",\"files\":[\"__DATA_DIR__(hw0_solution.py)\"]}": {
        "endpoint": "courses/assignments/submissions/submit",
        "module_name": "autograder.api.courses.assignments.submissions.submit",
        "arguments": {
            "allow-late": false
        },
        "output": {
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-admin@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 2,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 1,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Style is clean!",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 1234567890123,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"allow-late\":true,\"assignment-id\":\"bash\",\"course-id\":\"course-languages\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/submit\",\"files\":[\"__DATA_DIR__(assignment.sh)\"]}": {
        "endpoint": "courses/assignments/submissions/submit",
        "module_name": "autograder.api.courses.assignments.submissions.submit",
        "arguments": {
            "course": "course-languages",
            "assignment": "bash",
            "allow-late": true
        },
        "output": {
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course-languages::bash::course-admin@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course-languages",
                "assignment-id": "bash",
                "user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 10,
                "score": 10,
                "name": "bash",
                "questions": [
                    {
                        "name": "Task 1: add()",
                        "max_points": 10,
                        "score": 10,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 1234567890123,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"allow-late\":false,\"assignment-id\":\"bash\",\"course-id\":\"course-languages\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/submit\",\"files\":[\"__DATA_DIR__(assignment.sh)\"]}": {
        "endpoint": "courses/assignments/submissions/submit",
        "module_name": "autograder.api.courses.assignments.submissions.submit",
        "arguments": {
            "course": "course-languages",
            "assignment": "bash",
            "allow-late": false
        },
        "output": {
            "rejected": true,
            "message": "Attempting to submit assignment (A Simple Bash Assignment) late without the 'allow late' option. It was due on <timestamp:1234567890123> (which was <time-delta:1234567890123> ago). Use the 'allow late' option to submit an assignment late (e.g., `--allow-late`). See your interface's documentation for more information.",
            "grading-success": false,
            "result": null
        }
    },
    "{\"arguments\":{\"allow-late\":false,\"assignment-id\":\"hw0\",\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/assignments/submissions/submit\",\"files\":[\"__DATA_DIR__(hw0_no_compile.py)\"]}": {
        "endpoint": "courses/assignments/submissions/submit",
        "module_name": "autograder.api.courses.assignments.submissions.submit",
        "arguments": {
            "allow-late": false
        },
        "output": {
            "rejected": false,
            "message": "",
            "grading-success": true,
            "result": {
                "id": "course101::hw0::course-admin@test.edulinq.org::1234567890",
                "short-id": "1234567890",
                "course-id": "course101",
                "assignment-id": "hw0",
                "user": "course-admin@test.edulinq.org",
                "message": "",
                "max_points": 2,
                "score": 0,
                "name": "HW0",
                "questions": [
                    {
                        "name": "Q1",
                        "max_points": 1,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Submission could not be graded.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Q2",
                        "max_points": 1,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Submission could not be graded.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    },
                    {
                        "name": "Style",
                        "max_points": 0,
                        "score": 0,
                        "hard_fail": false,
                        "skipped": false,
                        "message": "Submission could not be graded.",
                        "grading_start_time": 1234567890123,
                        "grading_end_time": 1234567890123
                    }
                ],
                "grading_start_time": 1234567890123,
                "grading_end_time": 1234567890123,
                "additional-info": null
            }
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/lms/scores/upload\",\"files\":[]}": {
        "endpoint": "courses/lms/scores/upload",
        "module_name": "autograder.api.courses.lms.scores.upload",
        "arguments": {
            "dry-run": false
        },
        "output": {
            "dry-run": false,
            "results": []
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":true,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/lms/scores/upload\",\"files\":[]}": {
        "endpoint": "courses/lms/scores/upload",
        "module_name": "autograder.api.courses.lms.scores.upload",
        "arguments": {
            "dry-run": true
        },
        "output": {
            "dry-run": true,
            "results": []
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"type\":\"grading-time\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/stats/query\",\"files\":[]}": {
        "endpoint": "courses/stats/query",
        "module_name": "autograder.api.courses.stats.query",
        "arguments": {
            "type": "grading-time"
        },
        "output": {
            "results": [
                {
                    "timestamp": 100,
                    "type": "grading-time",
                    "value": 100,
                    "attributes": {
                        "assignment": "hw0",
                        "course": "course101",
                        "user": "server-admin@test.edulinq.org"
                    }
                },
                {
                    "timestamp": 100,
                    "type": "grading-time",
                    "value": 100,
                    "attributes": {
                        "assignment": "hw0",
                        "course": "course101",
                        "user": "server-admin@test.edulinq.org"
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":true,\"skip-build-images\":false,\"skip-emails\":false,\"skip-lms-sync\":false,\"skip-source-sync\":false,\"skip-tasks\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/upsert/zip\",\"files\":[\"__DATA_DIR__(course101.zip)\"]}": {
        "endpoint": "courses/upsert/zip",
        "module_name": "autograder.api.courses.upsert.zip",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "dry-run": true,
            "skip-build-images": false,
            "skip-emails": false,
            "skip-lms-sync": false,
            "skip-source-sync": false,
            "skip-tasks": false
        },
        "output": {
            "results": [
                {
                    "course-id": "course101",
                    "success": true,
                    "message": "",
                    "created": false,
                    "updated": true,
                    "lms-sync-result": null,
                    "built-assignment-images": [
                        "autograder.__autograder_dryrun__course101.hw0"
                    ]
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"skip-build-images\":false,\"skip-emails\":false,\"skip-lms-sync\":false,\"skip-source-sync\":false,\"skip-tasks\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/upsert/zip\",\"files\":[\"__DATA_DIR__(courses101-102.zip)\"]}": {
        "endpoint": "courses/upsert/zip",
        "module_name": "autograder.api.courses.upsert.zip",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "dry-run": false,
            "skip-build-images": false,
            "skip-emails": false,
            "skip-lms-sync": false,
            "skip-source-sync": false,
            "skip-tasks": false
        },
        "output": {
            "results": [
                {
                    "course-id": "course101",
                    "success": true,
                    "message": "",
                    "created": false,
                    "updated": true,
                    "lms-sync-result": null,
                    "built-assignment-images": [
                        "autograder.course101.hw0"
                    ]
                },
                {
                    "course-id": "course102",
                    "success": true,
                    "message": "",
                    "created": true,
                    "updated": false,
                    "lms-sync-result": null,
                    "built-assignment-images": []
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"skip-build-images\":false,\"skip-emails\":false,\"skip-lms-sync\":false,\"skip-source-sync\":false,\"skip-tasks\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/upsert/zip\",\"files\":[\"__DATA_DIR__(course101.zip)\"]}": {
        "endpoint": "courses/upsert/zip",
        "module_name": "autograder.api.courses.upsert.zip",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "dry-run": false,
            "skip-build-images": false,
            "skip-emails": false,
            "skip-lms-sync": false,
            "skip-source-sync": false,
            "skip-tasks": false
        },
        "output": {
            "results": [
                {
                    "course-id": "course101",
                    "success": true,
                    "message": "",
                    "created": false,
                    "updated": true,
                    "lms-sync-result": null,
                    "built-assignment-images": [
                        "autograder.course101.hw0"
                    ]
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"skip-build-images\":true,\"skip-emails\":false,\"skip-lms-sync\":false,\"skip-source-sync\":false,\"skip-tasks\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/upsert/zip\",\"files\":[\"__DATA_DIR__(course101.zip)\"]}": {
        "endpoint": "courses/upsert/zip",
        "module_name": "autograder.api.courses.upsert.zip",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "dry-run": false,
            "skip-build-images": true,
            "skip-emails": false,
            "skip-lms-sync": false,
            "skip-source-sync": false,
            "skip-tasks": false
        },
        "output": {
            "results": [
                {
                    "course-id": "course101",
                    "success": true,
                    "message": "",
                    "created": false,
                    "updated": true,
                    "lms-sync-result": null,
                    "built-assignment-images": null
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/drop\",\"files\":[]}": {
        "endpoint": "courses/users/drop",
        "module_name": "autograder.api.courses.users.drop",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-user": true
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/drop\",\"files\":[]}": {
        "endpoint": "courses/users/drop",
        "module_name": "autograder.api.courses.users.drop",
        "arguments": {
            "target-email": "ZZZ@test.edulinq.org"
        },
        "output": {
            "found-user": false
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"server-user@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/drop\",\"files\":[]}": {
        "endpoint": "courses/users/drop",
        "module_name": "autograder.api.courses.users.drop",
        "arguments": {
            "target-email": "server-user@test.edulinq.org"
        },
        "output": {
            "found-user": false
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"new-user@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "course-admin@test.edulinq.org",
            "pass": "course-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "new-user@test.edulinq.org",
                    "name": "",
                    "course-role": "student",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "new-user@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"new-user@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "new-user@test.edulinq.org",
                    "name": "",
                    "course-role": "student",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "new-user@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"new-user-1@test.edulinq.org\",\"name\":\"\"},{\"course-lms-id\":\"\",\"course-role\":\"grader\",\"email\":\"new-user-2@test.edulinq.org\",\"name\":\"\"},{\"course-lms-id\":\"\",\"course-role\":\"admin\",\"email\":\"new-user-3@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "course-admin@test.edulinq.org",
            "pass": "course-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "new-user-1@test.edulinq.org",
                    "name": "",
                    "course-role": "student",
                    "course-lms-id": ""
                },
                {
                    "email": "new-user-2@test.edulinq.org",
                    "name": "",
                    "course-role": "grader",
                    "course-lms-id": ""
                },
                {
                    "email": "new-user-3@test.edulinq.org",
                    "name": "",
                    "course-role": "admin",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "new-user-1@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                },
                {
                    "email": "new-user-2@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                },
                {
                    "email": "new-user-3@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"new-user-1@test.edulinq.org\",\"name\":\"\"},{\"course-lms-id\":\"\",\"course-role\":\"grader\",\"email\":\"new-user-2@test.edulinq.org\",\"name\":\"\"},{\"course-lms-id\":\"\",\"course-role\":\"admin\",\"email\":\"new-user-3@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "new-user-1@test.edulinq.org",
                    "name": "",
                    "course-role": "student",
                    "course-lms-id": ""
                },
                {
                    "email": "new-user-2@test.edulinq.org",
                    "name": "",
                    "course-role": "grader",
                    "course-lms-id": ""
                },
                {
                    "email": "new-user-3@test.edulinq.org",
                    "name": "",
                    "course-role": "admin",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "new-user-1@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                },
                {
                    "email": "new-user-2@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                },
                {
                    "email": "new-user-3@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"grader\",\"email\":\"course-student@test.edulinq.org\",\"name\":\"\"},{\"course-lms-id\":\"new-lms-id\",\"course-role\":\"grader\",\"email\":\"course-grader@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "course-admin@test.edulinq.org",
            "pass": "course-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "course-student@test.edulinq.org",
                    "name": "",
                    "course-role": "grader",
                    "course-lms-id": ""
                },
                {
                    "email": "course-grader@test.edulinq.org",
                    "name": "",
                    "course-role": "grader",
                    "course-lms-id": "new-lms-id"
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "course-grader@test.edulinq.org",
                    "modified": true
                },
                {
                    "email": "course-student@test.edulinq.org",
                    "modified": true
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"owner\",\"email\":\"course-student@test.edulinq.org\",\"name\":\"\"},{\"course-lms-id\":\"\",\"course-role\":\"owner\",\"email\":\"course-grader@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "course-admin@test.edulinq.org",
            "pass": "course-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "course-student@test.edulinq.org",
                    "name": "",
                    "course-role": "owner",
                    "course-lms-id": ""
                },
                {
                    "email": "course-grader@test.edulinq.org",
                    "name": "",
                    "course-role": "owner",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "course-grader@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                },
                {
                    "email": "course-student@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"new-lms-id\",\"course-role\":\"student\",\"email\":\"course-student@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "course-admin@test.edulinq.org",
            "pass": "course-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "course-student@test.edulinq.org",
                    "name": "",
                    "course-role": "student",
                    "course-lms-id": "new-lms-id"
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "course-student@test.edulinq.org",
                    "modified": true
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"grader\",\"email\":\"course-student@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "course-admin@test.edulinq.org",
            "pass": "course-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "course-student@test.edulinq.org",
                    "name": "",
                    "course-role": "grader",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "course-student@test.edulinq.org",
                    "modified": true
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"dry-run\":false,\"raw-course-users\":[{\"course-lms-id\":\"\",\"course-role\":\"owner\",\"email\":\"course-student@test.edulinq.org\",\"name\":\"\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/enroll\",\"files\":[]}": {
        "endpoint": "courses/users/enroll",
        "module_name": "autograder.api.courses.users.enroll",
        "arguments": {
            "user": "course-admin@test.edulinq.org",
            "pass": "course-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-course-users": [
                {
                    "email": "course-student@test.edulinq.org",
                    "name": "",
                    "course-role": "owner",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "course-student@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/get\",\"files\":[]}": {
        "endpoint": "courses/users/get",
        "module_name": "autograder.api.courses.users.get",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found": true,
            "user": {
                "type": "course",
                "email": "course-student@test.edulinq.org",
                "name": "course-student",
                "role": "student",
                "lms-id": "lms-course-student@test.edulinq.org"
            }
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/get\",\"files\":[]}": {
        "endpoint": "courses/users/get",
        "module_name": "autograder.api.courses.users.get",
        "arguments": {
            "target-email": "ZZZ@test.edulinq.org"
        },
        "output": {
            "found": false,
            "user": null
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"server-user@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/get\",\"files\":[]}": {
        "endpoint": "courses/users/get",
        "module_name": "autograder.api.courses.users.get",
        "arguments": {
            "target-email": "server-user@test.edulinq.org"
        },
        "output": {
            "found": false,
            "user": null
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/get\",\"files\":[]}": {
        "endpoint": "courses/users/get",
        "module_name": "autograder.api.courses.users.get",
        "arguments": {},
        "output": {
            "found": true,
            "user": {
                "type": "course",
                "email": "course-admin@test.edulinq.org",
                "name": "course-admin",
                "role": "admin",
                "lms-id": "lms-course-admin@test.edulinq.org"
            }
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-users\":[\"*\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/list\",\"files\":[]}": {
        "endpoint": "courses/users/list",
        "module_name": "autograder.api.courses.users.list",
        "arguments": {
            "target-users": [
                "*"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "course",
                    "email": "course-admin@test.edulinq.org",
                    "name": "course-admin",
                    "role": "admin",
                    "lms-id": "lms-course-admin@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-grader@test.edulinq.org",
                    "name": "course-grader",
                    "role": "grader",
                    "lms-id": "lms-course-grader@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-other@test.edulinq.org",
                    "name": "course-other",
                    "role": "other",
                    "lms-id": "lms-course-other@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-owner@test.edulinq.org",
                    "name": "course-owner",
                    "role": "owner",
                    "lms-id": "lms-course-owner@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-student@test.edulinq.org",
                    "name": "course-student",
                    "role": "student",
                    "lms-id": "lms-course-student@test.edulinq.org"
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/list\",\"files\":[]}": {
        "endpoint": "courses/users/list",
        "module_name": "autograder.api.courses.users.list",
        "arguments": {},
        "output": {
            "users": [
                {
                    "type": "course",
                    "email": "course-admin@test.edulinq.org",
                    "name": "course-admin",
                    "role": "admin",
                    "lms-id": "lms-course-admin@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-grader@test.edulinq.org",
                    "name": "course-grader",
                    "role": "grader",
                    "lms-id": "lms-course-grader@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-other@test.edulinq.org",
                    "name": "course-other",
                    "role": "other",
                    "lms-id": "lms-course-other@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-owner@test.edulinq.org",
                    "name": "course-owner",
                    "role": "owner",
                    "lms-id": "lms-course-owner@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-student@test.edulinq.org",
                    "name": "course-student",
                    "role": "student",
                    "lms-id": "lms-course-student@test.edulinq.org"
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-users\":[\"course-grader@test.edulinq.org\",\"course-owner@test.edulinq.org\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/list\",\"files\":[]}": {
        "endpoint": "courses/users/list",
        "module_name": "autograder.api.courses.users.list",
        "arguments": {
            "target-users": [
                "course-grader@test.edulinq.org",
                "course-owner@test.edulinq.org"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "course",
                    "email": "course-grader@test.edulinq.org",
                    "name": "course-grader",
                    "role": "grader",
                    "lms-id": "lms-course-grader@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-owner@test.edulinq.org",
                    "name": "course-owner",
                    "role": "owner",
                    "lms-id": "lms-course-owner@test.edulinq.org"
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-users\":[\"*\",\"-course-admin@test.edulinq.org\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/list\",\"files\":[]}": {
        "endpoint": "courses/users/list",
        "module_name": "autograder.api.courses.users.list",
        "arguments": {
            "target-users": [
                "*",
                "-course-admin@test.edulinq.org"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "course",
                    "email": "course-grader@test.edulinq.org",
                    "name": "course-grader",
                    "role": "grader",
                    "lms-id": "lms-course-grader@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-other@test.edulinq.org",
                    "name": "course-other",
                    "role": "other",
                    "lms-id": "lms-course-other@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-owner@test.edulinq.org",
                    "name": "course-owner",
                    "role": "owner",
                    "lms-id": "lms-course-owner@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-student@test.edulinq.org",
                    "name": "course-student",
                    "role": "student",
                    "lms-id": "lms-course-student@test.edulinq.org"
                }
            ]
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-users\":[\"student\",\"admin\"],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"courses/users/list\",\"files\":[]}": {
        "endpoint": "courses/users/list",
        "module_name": "autograder.api.courses.users.list",
        "arguments": {
            "target-users": [
                "student",
                "admin"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "course",
                    "email": "course-admin@test.edulinq.org",
                    "name": "course-admin",
                    "role": "admin",
                    "lms-id": "lms-course-admin@test.edulinq.org"
                },
                {
                    "type": "course",
                    "email": "course-student@test.edulinq.org",
                    "name": "course-student",
                    "role": "student",
                    "lms-id": "lms-course-student@test.edulinq.org"
                }
            ]
        }
    },
    "{\"arguments\":{\"assignment-lms-id\":\"12345\",\"course-id\":\"COURSE101\",\"scores\":[{\"email\":\"course-student@test.edulinq.org\",\"score\":10},{\"email\":\"zzz@test.edulinq.org\",\"score\":10}],\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"lms/upload/scores\",\"files\":[]}": {
        "endpoint": "lms/upload/scores",
        "module_name": "autograder.api.lms.uploadscores",
        "arguments": {
            "assignment-lms-id": "12345",
            "scores": [
                {
                    "email": "course-student@test.edulinq.org",
                    "score": 10
                },
                {
                    "email": "zzz@test.edulinq.org",
                    "score": 10
                }
            ]
        },
        "output": {
            "count": 1,
            "error-count": 1,
            "unrecognized-users": [
                {
                    "row": 1,
                    "entry": "zzz@test.edulinq.org"
                }
            ],
            "no-lms-id-users": []
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"lms/user/get\",\"files\":[]}": {
        "endpoint": "lms/user/get",
        "module_name": "autograder.api.lms.userget",
        "arguments": {
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found-autograder-user": true,
            "found-lms-user": true,
            "user": {
                "type": "course",
                "email": "course-student@test.edulinq.org",
                "name": "course-student",
                "role": "student",
                "lms-id": "lms-course-student@test.edulinq.org"
            }
        }
    },
    "{\"arguments\":{\"course-id\":\"COURSE101\",\"target-email\":\"ZZZ@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"lms/user/get\",\"files\":[]}": {
        "endpoint": "lms/user/get",
        "module_name": "autograder.api.lms.userget",
        "arguments": {
            "target-email": "ZZZ@test.edulinq.org"
        },
        "output": {
            "found-autograder-user": false,
            "found-lms-user": false,
            "user": null
        }
    },
    "{\"arguments\":{\"level\":\"INFO\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "level": "INFO"
        },
        "output": {
            "success": true,
            "error": null,
            "results": [
                {
                    "level": 0,
                    "message": "API Server Created.",
                    "timestamp": 0,
                    "attributes": {
                        "https": false,
                        "port": 8080,
                        "path": "/some/path/course.json",
                        "unix_socket": "/tmp/autograder.sock"
                    }
                },
                {
                    "level": 0,
                    "message": "Unix Socket Server Started.",
                    "timestamp": 0,
                    "attributes": {
                        "unix_socket": "/tmp/autograder.sock",
                        "path": "/some/path/course.json",
                        "port": 8080
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"level\":\"INFO\",\"target-course\":\"course101\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "target-course": "course101",
            "level": "INFO"
        },
        "output": {
            "success": true,
            "error": null,
            "results": []
        }
    },
    "{\"arguments\":{\"level\":\"INFO\",\"target-assignment\":\"HW0\",\"target-course\":\"course101\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "level": "INFO",
            "target-course": "course101",
            "target-assignment": "HW0"
        },
        "output": {
            "success": true,
            "error": null,
            "results": []
        }
    },
    "{\"arguments\":{\"level\":\"DEBUG\",\"target-email\":\"course-other@test.edulinq.org\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "level": "DEBUG",
            "target-email": "course-other@test.edulinq.org"
        },
        "output": {
            "success": true,
            "error": null,
            "results": []
        }
    },
    "{\"arguments\":{\"level\":\"DEBUG\",\"target-email\":\"ZZZ\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "level": "DEBUG",
            "target-email": "ZZZ"
        },
        "output": {
            "success": false,
            "error": {
                "locator": "-1102",
                "message": "Failed to validate log query: 'Could not find user with email 'ZZZ'.'."
            },
            "results": null
        }
    },
    "{\"arguments\":{\"level\":\"ERROR\",\"past\":\"24h\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "level": "ERROR",
            "past": "24h"
        },
        "output": {
            "success": true,
            "error": null,
            "results": []
        }
    },
    "{\"arguments\":{\"level\":\"INFO\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "level": "INFO"
        },
        "output": {
            "success": false,
            "error": {
                "locator": "",
                "message": "You do not have the correct permissions to execute this log query."
            },
            "results": null
        }
    },
    "{\"arguments\":{\"level\":\"INFO\",\"target-email\":\"course-other@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "target-email": "course-other@test.edulinq.org",
            "level": "INFO"
        },
        "output": {
            "success": false,
            "error": {
                "locator": "",
                "message": "You do not have the correct permissions to execute this log query."
            },
            "results": null
        }
    },
    "{\"arguments\":{\"level\":\"INFO\",\"target-email\":\"course-admin@test.edulinq.org\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "target-email": "course-admin@test.edulinq.org",
            "level": "INFO"
        },
        "output": {
            "success": true,
            "error": null,
            "results": []
        }
    },
    "{\"arguments\":{\"after\":\"1970-01-01T00:00:00+00:00\",\"level\":\"INFO\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "after": "1970-01-01T00:00:00+00:00",
            "level": "INFO"
        },
        "output": {
            "success": true,
            "error": null,
            "results": [
                {
                    "level": 0,
                    "message": "API Server Created.",
                    "timestamp": 0,
                    "attributes": {
                        "https": false,
                        "port": 8080,
                        "path": "/some/path/course.json",
                        "unix_socket": "/tmp/autograder.sock"
                    }
                },
                {
                    "level": 0,
                    "message": "Unix Socket Server Started.",
                    "timestamp": 0,
                    "attributes": {
                        "unix_socket": "/tmp/autograder.sock",
                        "path": "/some/path/course.json",
                        "port": 8080
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"after\":\"2999-01-01T00:00:00+00:00\",\"level\":\"DEBUG\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"logs/query\",\"files\":[]}": {
        "endpoint": "logs/query",
        "module_name": "autograder.api.logs.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "level": "DEBUG",
            "after": "2999-01-01T00:00:00+00:00"
        },
        "output": {
            "success": true,
            "error": null,
            "results": []
        }
    },
    "{\"arguments\":{\"force-compute\":false},\"endpoint\":\"metadata/describe\",\"files\":[]}": {
        "endpoint": "metadata/describe",
        "module_name": "autograder.api.metadata.describe",
        "arguments": {
            "force-compute": false
        },
        "output": {
            "endpoints": {
                "courses/admin/email": {
                    "description": "Send an email to course users.",
                    "input": [
                        {
                            "name": "bcc",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "body",
                            "type": "string"
                        },
                        {
                            "name": "cc",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "html",
                            "type": "bool"
                        },
                        {
                            "name": "subject",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "to",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "bcc",
                            "type": "[]string"
                        },
                        {
                            "name": "cc",
                            "type": "[]string"
                        },
                        {
                            "name": "to",
                            "type": "[]string"
                        }
                    ]
                },
                "courses/admin/update": {
                    "description": "Update an existing course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "result",
                            "type": "*courses.CourseUpsertResult"
                        }
                    ]
                },
                "courses/assignments/get": {
                    "description": "Get the information for a course assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "assignment",
                            "type": "*core.AssignmentInfo"
                        }
                    ]
                },
                "courses/assignments/list": {
                    "description": "List the assignments in the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "assignments",
                            "type": "[]*core.AssignmentInfo"
                        }
                    ]
                },
                "courses/assignments/report": {
                    "description": "Fetch an assignment grading report for a course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "course-report",
                            "type": "*report.CourseScoringReport"
                        }
                    ]
                },
                "courses/assignments/submissions/analysis/individual": {
                    "description": "Get the result of a individual analysis for the specified submissions.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "submissions",
                            "type": "[]string",
                            "description": "The raw submission specifications to analyze.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ],
                    "output": [
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "options",
                            "type": "analysis.AnalysisOptions"
                        },
                        {
                            "name": "results",
                            "type": "map[string]*model.IndividualAnalysis"
                        },
                        {
                            "name": "summary",
                            "type": "*model.IndividualAnalysisSummary"
                        },
                        {
                            "name": "work-errors",
                            "type": "map[string]string"
                        }
                    ]
                },
                "courses/assignments/submissions/analysis/pairwise": {
                    "description": "Get the result of a pairwise analysis for the specified submissions.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "submissions",
                            "type": "[]string",
                            "description": "The raw submission specifications to analyze.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ],
                    "output": [
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "options",
                            "type": "analysis.AnalysisOptions"
                        },
                        {
                            "name": "results",
                            "type": "map[model.PairwiseKey]*model.PairwiseAnalysis"
                        },
                        {
                            "name": "summary",
                            "type": "*model.PairwiseAnalysisSummary"
                        },
                        {
                            "name": "work-errors",
                            "type": "map[string]string"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/course/attempts": {
                    "description": "Get all recent submissions and grading information for this assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "If not empty, filter results to matching users."
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "grading-results",
                            "type": "map[string]*model.GradingResult"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/course/scores": {
                    "description": "Get a summary of the most recent scores for this assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "If not empty, filter results to matching users."
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "submission-infos",
                            "type": "map[string]*model.SubmissionHistoryItem"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/attempt": {
                    "description": "Get a submission along with all grading information.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-result",
                            "type": "*model.GradingResult"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/attempts": {
                    "description": "Get all submission attempts made by a user along with all grading information.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-results",
                            "type": "[]*model.GradingResult"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/history": {
                    "description": "Get a summary of the submissions for this assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "history",
                            "type": "[]*model.SubmissionHistoryItem"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/peek": {
                    "description": "Get a copy of the grading report for the specified submission. Does not submit a new submission.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "submission-result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/assignments/submissions/proxy/regrade": {
                    "description": "Proxy regrade an assignment for all target users using their most recent submission.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "regrade-cutoff",
                            "type": "int64",
                            "description": "Ensure every user has made a new submission after this time.\nIf nil, the current time will be used."
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "The raw course user references to regrade.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ],
                    "output": [
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "options",
                            "type": "grader.RegradeOptions"
                        },
                        {
                            "name": "resolved-users",
                            "type": "[]string"
                        },
                        {
                            "name": "results",
                            "type": "map[string]*model.SubmissionHistoryItem"
                        },
                        {
                            "name": "work-errors",
                            "type": "map[string]string"
                        }
                    ]
                },
                "courses/assignments/submissions/proxy/resubmit": {
                    "description": "Proxy resubmit an assignment submission to the autograder.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "proxy-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "proxy-time",
                            "type": "int64"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-success",
                            "type": "bool"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "rejected",
                            "type": "bool"
                        },
                        {
                            "name": "result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/assignments/submissions/proxy/submit": {
                    "description": "Proxy submit an assignment submission to the autograder.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "proxy-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "proxy-time",
                            "type": "int64"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-success",
                            "type": "bool"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "rejected",
                            "type": "bool"
                        },
                        {
                            "name": "result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/assignments/submissions/remove": {
                    "description": "Remove a specified submission. Defaults to the most recent submission.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        }
                    ]
                },
                "courses/assignments/submissions/submit": {
                    "description": "Submit an assignment submission to the autograder.",
                    "input": [
                        {
                            "name": "allow-late",
                            "type": "bool"
                        },
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "grading-success",
                            "type": "bool"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "rejected",
                            "type": "bool"
                        },
                        {
                            "name": "result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/lms/scores/upload": {
                    "description": "Perform a full scoring and upload scores to the course's LMS.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "results",
                            "type": "[]*model.ExternalScoringInfo"
                        }
                    ]
                },
                "courses/stats/query": {
                    "description": "Query metrics for a specific course.\nOnly the context course can be queried for, the target-course field will be ignored for this endpoint.",
                    "input": [
                        {
                            "name": "after",
                            "type": "int64",
                            "description": "Only return data from after this time.\nA value of zero is treated normally here (as UNIX epoch)."
                        },
                        {
                            "name": "before",
                            "type": "int64",
                            "description": "Only return data from before this time.\nA value of zero is treated as the end of time."
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "limit",
                            "type": "int",
                            "description": "Limit the number of results.\nTake this number of results from the top.\nA non-positive number means no count limit will be applied."
                        },
                        {
                            "name": "sort",
                            "type": "int",
                            "description": "Define how the results should be sorted by time.\n-1 for ascending, 0 for no sorting, 1 for descending."
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "description": "Only return data of this type.\nThis field is required in the query to specify which kind of metric to return.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "where",
                            "type": "map[stats.MetricAttribute]any",
                            "description": "Filter results to only include metrics that match Metric attribute field values.\nKeys are field names (e.g., \"course\") and values are what to include (e.g., course101).\nThis filter is applied after all other Query conditions are applied."
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*stats.Metric"
                        }
                    ]
                },
                "courses/upsert/filespec": {
                    "description": "Upsert a course using a filespec.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "filespec",
                            "type": "util.FileSpec",
                            "required": true
                        },
                        {
                            "name": "skip-build-images",
                            "type": "bool"
                        },
                        {
                            "name": "skip-emails",
                            "type": "bool"
                        },
                        {
                            "name": "skip-lms-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-source-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-template-files",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]courses.CourseUpsertResult"
                        }
                    ]
                },
                "courses/upsert/zip": {
                    "description": "Upsert a course using a zip file.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "skip-build-images",
                            "type": "bool"
                        },
                        {
                            "name": "skip-emails",
                            "type": "bool"
                        },
                        {
                            "name": "skip-lms-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-source-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-template-files",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]courses.CourseUpsertResult"
                        }
                    ]
                },
                "courses/users/drop": {
                    "description": "Drop a user from the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        }
                    ]
                },
                "courses/users/enroll": {
                    "description": "Enroll one or more users to the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Do not actually commit any changes or send any emails regardless of |SendEmails|."
                        },
                        {
                            "name": "raw-course-users",
                            "type": "[]*model.RawCourseUserData",
                            "required": true
                        },
                        {
                            "name": "send-emails",
                            "type": "bool",
                            "description": "Send any relevant email (usually about creation or password changing)."
                        },
                        {
                            "name": "skip-inserts",
                            "type": "bool"
                        },
                        {
                            "name": "skip-updates",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*model.ExternalUserOpResult"
                        }
                    ]
                },
                "courses/users/get": {
                    "description": "Get the information for a course user.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found",
                            "type": "bool"
                        },
                        {
                            "name": "user",
                            "type": "*core.CourseUserInfo"
                        }
                    ]
                },
                "courses/users/list": {
                    "description": "List the users in the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "users",
                            "type": "[]*core.CourseUserInfo"
                        }
                    ]
                },
                "lms/upload/scores": {
                    "description": "Upload scores from a tab-separated file to the course's LMS.\nThe file should not have headers, and should have two columns: email and score.",
                    "input": [
                        {
                            "name": "assignment-lms-id",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "scores",
                            "type": "[]upload.ScoreEntry",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "error-count",
                            "type": "int"
                        },
                        {
                            "name": "no-lms-id-users",
                            "type": "[]upload.RowEntry"
                        },
                        {
                            "name": "unrecognized-users",
                            "type": "[]upload.RowEntry"
                        }
                    ]
                },
                "lms/user/get": {
                    "description": "Get information for an LMS user.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-autograder-user",
                            "type": "bool"
                        },
                        {
                            "name": "found-lms-user",
                            "type": "bool"
                        },
                        {
                            "name": "user",
                            "type": "*core.CourseUserInfo"
                        }
                    ]
                },
                "logs/query": {
                    "description": "Query log entries from the autograder server.",
                    "input": [
                        {
                            "name": "after",
                            "type": "string"
                        },
                        {
                            "name": "level",
                            "type": "string"
                        },
                        {
                            "name": "past",
                            "type": "string"
                        },
                        {
                            "name": "target-assignment",
                            "type": "string"
                        },
                        {
                            "name": "target-course",
                            "type": "string"
                        },
                        {
                            "name": "target-email",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "error",
                            "type": "*model.ExternalLocatableError"
                        },
                        {
                            "name": "results",
                            "type": "[]*log.Record"
                        },
                        {
                            "name": "success",
                            "type": "bool"
                        }
                    ]
                },
                "metadata/describe": {
                    "description": "Describe all endpoints on the server.",
                    "input": [
                        {
                            "name": "force-compute",
                            "type": "bool"
                        }
                    ],
                    "output": [
                        {
                            "name": "endpoints",
                            "type": "map[string]core.EndpointDescription"
                        },
                        {
                            "name": "types",
                            "type": "map[string]core.TypeDescription"
                        }
                    ]
                },
                "metadata/heartbeat": {
                    "description": "Get server heartbeat.",
                    "input": [],
                    "output": [
                        {
                            "name": "server-version",
                            "type": "util.Version"
                        }
                    ]
                },
                "stats/query": {
                    "description": "Query stats for the server.",
                    "input": [
                        {
                            "name": "after",
                            "type": "int64",
                            "description": "Only return data from after this time.\nA value of zero is treated normally here (as UNIX epoch)."
                        },
                        {
                            "name": "before",
                            "type": "int64",
                            "description": "Only return data from before this time.\nA value of zero is treated as the end of time."
                        },
                        {
                            "name": "limit",
                            "type": "int",
                            "description": "Limit the number of results.\nTake this number of results from the top.\nA non-positive number means no count limit will be applied."
                        },
                        {
                            "name": "sort",
                            "type": "int",
                            "description": "Define how the results should be sorted by time.\n-1 for ascending, 0 for no sorting, 1 for descending."
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "description": "Only return data of this type.\nThis field is required in the query to specify which kind of metric to return.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "where",
                            "type": "map[stats.MetricAttribute]any",
                            "description": "Filter results to only include metrics that match Metric attribute field values.\nKeys are field names (e.g., \"course\") and values are what to include (e.g., course101).\nThis filter is applied after all other Query conditions are applied."
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*stats.Metric"
                        }
                    ]
                },
                "system/stacks": {
                    "description": "Get stack traces for all the currently running routines (threads) on the server.",
                    "input": [
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "stacks",
                            "type": "[]*util.CallStack"
                        }
                    ]
                },
                "users/auth": {
                    "description": "Authenticate as a user.",
                    "input": [
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "success",
                            "type": "bool"
                        }
                    ]
                },
                "users/get": {
                    "description": "Get the information for a server user.",
                    "input": [
                        {
                            "name": "target-email",
                            "type": "core.TargetServerUserSelfOrAdmin"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "courses",
                            "type": "map[string]*core.CourseInfo"
                        },
                        {
                            "name": "found",
                            "type": "bool"
                        },
                        {
                            "name": "user",
                            "type": "*core.ServerUserInfo"
                        }
                    ]
                },
                "users/list": {
                    "description": "List the users on the server.",
                    "input": [
                        {
                            "name": "target-users",
                            "type": "[]model.ServerUserReference"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "users",
                            "type": "[]*core.ServerUserInfo"
                        }
                    ]
                },
                "users/password/change": {
                    "description": "Change your password to the one provided.",
                    "input": [
                        {
                            "name": "new-pass",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "duplicate",
                            "type": "bool"
                        },
                        {
                            "name": "success",
                            "type": "bool"
                        }
                    ]
                },
                "users/password/reset": {
                    "description": "Reset to a random password that will be emailed to you.",
                    "input": [
                        {
                            "name": "user-email",
                            "type": "string",
                            "required": true
                        }
                    ],
                    "output": []
                },
                "users/remove": {
                    "description": "Remove a user from the server.",
                    "input": [
                        {
                            "name": "target-email",
                            "type": "core.TargetServerUser",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        }
                    ]
                },
                "users/tokens/create": {
                    "description": "Create a new authentication token.",
                    "input": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "token-cleartext",
                            "type": "string"
                        },
                        {
                            "name": "token-id",
                            "type": "string"
                        }
                    ]
                },
                "users/tokens/delete": {
                    "description": "Delete an authentication token.",
                    "input": [
                        {
                            "name": "token-id",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found",
                            "type": "bool"
                        }
                    ]
                },
                "users/upsert": {
                    "description": "Upsert one or more users to the server (update if exists, insert otherwise).",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Do not actually commit any changes or send any emails regardless of |SendEmails|."
                        },
                        {
                            "name": "raw-users",
                            "type": "[]*model.RawServerUserData",
                            "required": true
                        },
                        {
                            "name": "send-emails",
                            "type": "bool",
                            "description": "Send any relevant email (usually about creation or password changing)."
                        },
                        {
                            "name": "skip-inserts",
                            "type": "bool"
                        },
                        {
                            "name": "skip-updates",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*model.ExternalUserOpResult"
                        }
                    ]
                }
            },
            "types": {
                "analysis.AnalysisOptions": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "submissions",
                            "type": "[]string",
                            "description": "The raw submission specifications to analyze."
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ]
                },
                "core.AssignmentInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "due-date",
                            "type": "int64"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "max-points",
                            "type": "float64"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "core.BaseFieldDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.CourseInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignments",
                            "type": "map[string]*core.AssignmentInfo"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "core.CourseUserInfo": {
                    "category": "struct",
                    "description": "An API-safe representation of a course user.\nEmbed the BaseUserInfo and use CourseUserInfoType as the type.",
                    "fields": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "lms-id",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "int"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.EndpointDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "input",
                            "type": "[]core.FieldDescription"
                        },
                        {
                            "name": "output",
                            "type": "[]core.BaseFieldDescription"
                        }
                    ]
                },
                "core.EnrollmentInfo": {
                    "category": "struct",
                    "description": "An API-safe representation of enrollment information.",
                    "fields": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "int"
                        }
                    ]
                },
                "core.FieldDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "required",
                            "type": "bool"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.NonEmptyString": {
                    "category": "alias",
                    "description": "The type for a named field that must have a non-empty string value.",
                    "alias-type": "string"
                },
                "core.ServerUserInfo": {
                    "category": "struct",
                    "description": "An API-safe representation of a server user.\nEmbed the BaseUserInfo and use ServerUserInfoType as the type.",
                    "fields": [
                        {
                            "name": "courses",
                            "type": "map[string]core.EnrollmentInfo"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "int"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.TargetCourseUser": {
                    "category": "struct",
                    "description": "A request having a field of this type indicates that the request is targeting a specific course user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext."
                },
                "core.TargetCourseUserSelfOrGrader": {
                    "category": "struct",
                    "description": "Same as TargetServerUserSelfOrAdmin, but in the context of a course user and a grader context user.\nTherefore, the context user only has to be a grader in the context course (or the target user themself).\nWhen targeting yourself, the user can be a server admin (and will be escalated to course owner for the request).\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext.",
                    "fields": [
                        {
                            "name": "TargetCourseUser",
                            "type": "core.TargetCourseUser"
                        }
                    ]
                },
                "core.TargetServerUser": {
                    "category": "struct",
                    "description": "A request having a field of this type indicates that the request is targeting a specific server user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext."
                },
                "core.TargetServerUserSelfOrAdmin": {
                    "category": "struct",
                    "description": "A request having a field of this type indicates that the request is targeting a specific user.\nThis type serializes to/from a string.\nIf no user is specified, then the context user is the target.\nIf a user is specified, then the context user must be a server admin\n(any user can access their own resources, but higher permissions are required to access another user's resources).\nNo error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext.",
                    "fields": [
                        {
                            "name": "TargetServerUser",
                            "type": "core.TargetServerUser"
                        }
                    ]
                },
                "core.TypeDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "alias-type",
                            "type": "string"
                        },
                        {
                            "name": "category",
                            "type": "string"
                        },
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "element-type",
                            "type": "string"
                        },
                        {
                            "name": "fields",
                            "type": "[]core.BaseFieldDescription"
                        }
                    ]
                },
                "core.UserInfoType": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "courses.CourseUpsertResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-template-files",
                            "type": "map[string][]string"
                        },
                        {
                            "name": "built-assignment-images",
                            "type": "[]string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "created",
                            "type": "bool"
                        },
                        {
                            "name": "lms-sync-result",
                            "type": "*model.LMSSyncResult"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "success",
                            "type": "bool"
                        },
                        {
                            "name": "updated",
                            "type": "bool"
                        }
                    ]
                },
                "grader.RegradeOptions": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "regrade-cutoff",
                            "type": "int64",
                            "description": "Ensure every user has made a new submission after this time.\nIf nil, the current time will be used."
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "The raw course user references to regrade."
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ]
                },
                "log.LogLevel": {
                    "category": "alias",
                    "alias-type": "int32"
                },
                "log.Record": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment",
                            "type": "string"
                        },
                        {
                            "name": "attributes",
                            "type": "map[string]any",
                            "description": "Additional Attributes"
                        },
                        {
                            "name": "course",
                            "type": "string",
                            "description": "Context Attributes"
                        },
                        {
                            "name": "error",
                            "type": "string"
                        },
                        {
                            "name": "level",
                            "type": "int32",
                            "description": "Core Attributes"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.AnalysisFileInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "filename",
                            "type": "string"
                        },
                        {
                            "name": "lines-of-code",
                            "type": "int"
                        },
                        {
                            "name": "original-filename",
                            "type": "string"
                        }
                    ]
                },
                "model.AssignmentAnalysisOptions": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "exclude-patterns",
                            "type": "[]string"
                        },
                        {
                            "name": "include-patterns",
                            "type": "[]string"
                        },
                        {
                            "name": "template-file-ops",
                            "type": "[]*util.FileOperation"
                        },
                        {
                            "name": "template-files",
                            "type": "[]*util.FileSpec"
                        }
                    ]
                },
                "model.AssignmentInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "late-days-lms-id",
                            "type": "string"
                        },
                        {
                            "name": "late-days-lms-name",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "model.AssignmentSyncResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "ambiguous-matches",
                            "type": "[]model.AssignmentInfo"
                        },
                        {
                            "name": "non-matched-assignments",
                            "type": "[]model.AssignmentInfo"
                        },
                        {
                            "name": "synced-assignments",
                            "type": "[]model.AssignmentInfo"
                        },
                        {
                            "name": "unchanged-assignments",
                            "type": "[]model.AssignmentInfo"
                        }
                    ]
                },
                "model.CourseUserReference": {
                    "category": "alias",
                    "description": "Course user references can represent the following:\n- An email address.\n- A literal \"*\" (which includes all users in the course).\n- A course role (which will include all course users with that role).\n- Any of the above options preceded by a dash (\"-\") (which indicates that the user or group will NOT be included in the final results).",
                    "alias-type": "string"
                },
                "model.CourseUserRole": {
                    "category": "alias",
                    "description": "Course user roles represent a user's role within a single course.",
                    "alias-type": "int"
                },
                "model.ExternalLocatableError": {
                    "category": "struct",
                    "description": "A user safe version of locatable errors.\nAll LocatableErrors must be converted to ExternalLocatableErrors\nif it is to be given to a user.",
                    "fields": [
                        {
                            "name": "locator",
                            "type": "string"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ]
                },
                "model.ExternalScoringInfo": {
                    "category": "struct",
                    "description": "A trimmed-down version of ScoringInfo meant for external usage.",
                    "fields": [
                        {
                            "name": "assignment",
                            "type": "string"
                        },
                        {
                            "name": "raw-score",
                            "type": "float64"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "submission-id",
                            "type": "string"
                        },
                        {
                            "name": "submission-time",
                            "type": "int64"
                        },
                        {
                            "name": "upload-time",
                            "type": "int64"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.ExternalUserOpResult": {
                    "category": "struct",
                    "description": "A user safe representation of the UserOpResult struct.\nNotably all errors will be converted to responses and the cleartext password field is removed.\nFor descriptions of shared fields, see UserOpResult above.",
                    "fields": [
                        {
                            "name": "added",
                            "type": "bool",
                            "description": "The user was added to the server."
                        },
                        {
                            "name": "communication-error",
                            "type": "*model.ExternalLocatableError",
                            "description": "A user safe representation of a communication error."
                        },
                        {
                            "name": "dropped",
                            "type": "[]string",
                            "description": "The user was removed from the following courses (by id)."
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "description": "The email/id of the target user."
                        },
                        {
                            "name": "emailed",
                            "type": "bool",
                            "description": "The user was emailed during the course of this operation.\nThis is more than just GetEmail() was called, an actual email was sent\n(or would have been sent if this operation was during a dry-run)."
                        },
                        {
                            "name": "enrolled",
                            "type": "[]string",
                            "description": "The user was enrolled in the following courses (by id)."
                        },
                        {
                            "name": "modified",
                            "type": "bool",
                            "description": "The user existed before this operation and was edited (including enrollment changes)."
                        },
                        {
                            "name": "not-exists",
                            "type": "bool",
                            "description": "The user did not exist before this operation and does not exist after.\nThis may also be an error depending on the semantics of the operation."
                        },
                        {
                            "name": "removed",
                            "type": "bool",
                            "description": "The user existed before this operation and was removed."
                        },
                        {
                            "name": "skipped",
                            "type": "bool",
                            "description": "The user was skipped (often because they already exist)."
                        },
                        {
                            "name": "system-error",
                            "type": "*model.ExternalLocatableError",
                            "description": "A user safe representation of a system error."
                        },
                        {
                            "name": "validation-error",
                            "type": "*model.ExternalLocatableError",
                            "description": "A user safe representation of a validation error, which will not include a locator."
                        }
                    ]
                },
                "model.FileSimilarity": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "filename",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "map[string]any"
                        },
                        {
                            "name": "original-filename",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "tool",
                            "type": "string"
                        },
                        {
                            "name": "version",
                            "type": "string"
                        }
                    ]
                },
                "model.GradedQuestion": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "grading_end_time",
                            "type": "int64"
                        },
                        {
                            "name": "grading_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "hard_fail",
                            "type": "bool"
                        },
                        {
                            "name": "max_points",
                            "type": "float64"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "skipped",
                            "type": "bool"
                        }
                    ]
                },
                "model.GradingInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "additional-info",
                            "type": "map[string]any"
                        },
                        {
                            "name": "assignment-id",
                            "type": "string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "epilogue",
                            "type": "string"
                        },
                        {
                            "name": "grading_end_time",
                            "type": "int64"
                        },
                        {
                            "name": "grading_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "max_points",
                            "type": "float64"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "prologue",
                            "type": "string"
                        },
                        {
                            "name": "proxy-user",
                            "type": "string"
                        },
                        {
                            "name": "proxy_end_time",
                            "type": "int64"
                        },
                        {
                            "name": "proxy_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "questions",
                            "type": "[]*model.GradedQuestion"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "short-id",
                            "type": "string"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.GradingResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "info",
                            "type": "*model.GradingInfo"
                        },
                        {
                            "name": "input-files-gzip",
                            "type": "map[string][]uint8"
                        },
                        {
                            "name": "output-files-gzip",
                            "type": "map[string][]uint8"
                        },
                        {
                            "name": "stderr",
                            "type": "string"
                        },
                        {
                            "name": "stdout",
                            "type": "string"
                        }
                    ]
                },
                "model.IndividualAnalysis": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "analysis-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "assignment-id",
                            "type": "string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "failure",
                            "type": "bool"
                        },
                        {
                            "name": "failure-message",
                            "type": "string"
                        },
                        {
                            "name": "files",
                            "type": "[]model.AnalysisFileInfo"
                        },
                        {
                            "name": "lines-of-code",
                            "type": "int"
                        },
                        {
                            "name": "lines-of-code-delta",
                            "type": "int"
                        },
                        {
                            "name": "lines-of-code-per-hour",
                            "type": "float64"
                        },
                        {
                            "name": "options",
                            "type": "*model.AssignmentAnalysisOptions"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "score-delta",
                            "type": "float64"
                        },
                        {
                            "name": "score-per-hour",
                            "type": "float64"
                        },
                        {
                            "name": "short-id",
                            "type": "string"
                        },
                        {
                            "name": "skipped-files",
                            "type": "[]string"
                        },
                        {
                            "name": "submission-id",
                            "type": "string"
                        },
                        {
                            "name": "submission-start-time",
                            "type": "int64"
                        },
                        {
                            "name": "submission-time-delta",
                            "type": "int64"
                        },
                        {
                            "name": "user-email",
                            "type": "string"
                        }
                    ]
                },
                "model.IndividualAnalysisSummary": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "aggregate-lines-of-code",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-lines-of-code-delta",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-lines-of-code-per-file",
                            "type": "map[string]util.AggregateValues"
                        },
                        {
                            "name": "aggregate-lines-of-code-per-hour",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-score",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-score-delta",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-score-per-hour",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-submission-time-delta",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "complete-count",
                            "type": "int"
                        },
                        {
                            "name": "error-count",
                            "type": "int"
                        },
                        {
                            "name": "failure-count",
                            "type": "int"
                        },
                        {
                            "name": "first-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "last-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "pending-count",
                            "type": "int"
                        }
                    ]
                },
                "model.LMSSyncResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-sync",
                            "type": "*model.AssignmentSyncResult"
                        },
                        {
                            "name": "user-sync",
                            "type": "[]*model.UserOpResult"
                        }
                    ]
                },
                "model.LocatableError": {
                    "category": "struct",
                    "description": "A general representation of errors that have a definite source location."
                },
                "model.PairwiseAnalysis": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "analysis-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "failure",
                            "type": "bool"
                        },
                        {
                            "name": "failure-message",
                            "type": "string"
                        },
                        {
                            "name": "mean-similarities",
                            "type": "map[string]float64"
                        },
                        {
                            "name": "options",
                            "type": "*model.AssignmentAnalysisOptions"
                        },
                        {
                            "name": "similarities",
                            "type": "map[string][]*model.FileSimilarity"
                        },
                        {
                            "name": "skipped-files",
                            "type": "[]string"
                        },
                        {
                            "name": "submission-ids",
                            "type": "model.PairwiseKey"
                        },
                        {
                            "name": "total-mean-similarity",
                            "type": "float64"
                        },
                        {
                            "name": "unmatched-files",
                            "type": "[][]string"
                        }
                    ]
                },
                "model.PairwiseAnalysisSummary": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "aggregate-mean-similarities",
                            "type": "map[string]util.AggregateValues"
                        },
                        {
                            "name": "aggregate-total-mean-similarity",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "complete-count",
                            "type": "int"
                        },
                        {
                            "name": "error-count",
                            "type": "int"
                        },
                        {
                            "name": "failure-count",
                            "type": "int"
                        },
                        {
                            "name": "first-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "last-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "pending-count",
                            "type": "int"
                        }
                    ]
                },
                "model.PairwiseKey": {
                    "category": "array",
                    "description": "A key for pairwise analysis.\nShould always be an ordered (lexicographically) pair of full submissions IDs.",
                    "element-type": "string"
                },
                "model.RawCourseUserData": {
                    "category": "struct",
                    "description": "Raw/dirty data for a course user.\nThis struct is used for raw data coming from a single course.",
                    "fields": [
                        {
                            "name": "course-lms-id",
                            "type": "string"
                        },
                        {
                            "name": "course-role",
                            "type": "string"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "model.RawServerUserData": {
                    "category": "struct",
                    "description": "Raw/dirty data for a user.\nThis struct can be directly embedded for Kong arguments.",
                    "fields": [
                        {
                            "name": "course",
                            "type": "string"
                        },
                        {
                            "name": "course-lms-id",
                            "type": "string"
                        },
                        {
                            "name": "course-role",
                            "type": "string"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "pass",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "string"
                        }
                    ]
                },
                "model.ServerUserReference": {
                    "category": "alias",
                    "description": "Server user references can represent the following:\n- An email address.\n- A literal \"*\" (which includes all users on the server).\n- A server role (which will include all server users with that role).\n- <course-id>::<course-role> (which will include all users in the target course with that role).\n- *::<course-role> (which will include all users with the course role in any course).\n- <course-id>::* (which will include all users in the target course).\n- *::* (which includes all users enrolled in at least one course).\n- Any of the above options preceded by a dash (\"-\") (which indicates that the user or group will NOT be included in the final results).",
                    "alias-type": "string"
                },
                "model.ServerUserRole": {
                    "category": "alias",
                    "description": "Server user roles represent a user's role within an autograder server instance.",
                    "alias-type": "int"
                },
                "model.SubmissionHistoryItem": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-id",
                            "type": "string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "grading_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "max_points",
                            "type": "float64"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "short-id",
                            "type": "string"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.UserOpResult": {
                    "category": "struct",
                    "description": "A general representation of the result of operations that modify a user in any way (add, remove, enroll, drop, etc).\nAll user-facing functions (essentially non-db functions) should return an instance or collection of these objects.",
                    "fields": [
                        {
                            "name": "added",
                            "type": "bool",
                            "description": "The user was added to the server."
                        },
                        {
                            "name": "cleartext-password",
                            "type": "string",
                            "description": "The following cleartext password was generated during this operation.\nCare should be taken to not expose this field."
                        },
                        {
                            "name": "communication-error",
                            "type": "*model.LocatableError",
                            "description": "The following error occurred during this operation, but not because of the provided data,\ni.e., the system was unable to communicate the results.\nThese errors are not guaranteed to be safe for users,\nand the calling code should decide how they should be managed."
                        },
                        {
                            "name": "dropped",
                            "type": "[]string",
                            "description": "The user was removed from the following courses (by id)."
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "description": "The email/id of the target user."
                        },
                        {
                            "name": "emailed",
                            "type": "bool",
                            "description": "The user was emailed during the course of this operation.\nThis is more than just GetEmail() was called, an actual email was sent\n(or would have been sent if this operation was during a dry-run)."
                        },
                        {
                            "name": "enrolled",
                            "type": "[]string",
                            "description": "The user was enrolled in the following courses (by id)."
                        },
                        {
                            "name": "modified",
                            "type": "bool",
                            "description": "The user existed before this operation and was edited (including enrollment changes)."
                        },
                        {
                            "name": "not-exists",
                            "type": "bool",
                            "description": "The user did not exist before this operation and does not exist after.\nThis may also be an error depending on the semantics of the operation."
                        },
                        {
                            "name": "removed",
                            "type": "bool",
                            "description": "The user existed before this operation and was removed."
                        },
                        {
                            "name": "skipped",
                            "type": "bool",
                            "description": "The user was skipped (often because they already exist)."
                        },
                        {
                            "name": "system-error",
                            "type": "*model.LocatableError",
                            "description": "The following error occurred during this operation, but not because of the provided data,\ni.e., they are the system's fault.\nThese errors are not guaranteed to be safe for users,\nand the calling code should decide how they should be managed."
                        },
                        {
                            "name": "validation-error",
                            "type": "*model.LocatableError",
                            "description": "The following error occurred during this operation because of the provided data,\ni.e., they are caused by the calling user.\nAll error messages should be safe for users."
                        }
                    ]
                },
                "report.AssignmentScoringReport": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-name",
                            "type": "string"
                        },
                        {
                            "name": "latest-submission",
                            "type": "int64"
                        },
                        {
                            "name": "number-of-submissions",
                            "type": "int"
                        },
                        {
                            "name": "questions",
                            "type": "[]*report.ScoringReportQuestionStats"
                        }
                    ]
                },
                "report.CourseScoringReport": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignments",
                            "type": "[]*report.AssignmentScoringReport"
                        },
                        {
                            "name": "course-name",
                            "type": "string"
                        }
                    ]
                },
                "report.ScoringReportQuestionStats": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "max",
                            "type": "float64"
                        },
                        {
                            "name": "mean",
                            "type": "float64"
                        },
                        {
                            "name": "median",
                            "type": "float64"
                        },
                        {
                            "name": "min",
                            "type": "float64"
                        },
                        {
                            "name": "question-name",
                            "type": "string"
                        },
                        {
                            "name": "standard-deviation",
                            "type": "float64"
                        }
                    ]
                },
                "stats.Metric": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "attributes",
                            "type": "map[stats.MetricAttribute]any",
                            "description": "Additional attributes that are not standard enough to be formalized in fields."
                        },
                        {
                            "name": "timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "float64"
                        }
                    ]
                },
                "stats.MetricAttribute": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "stats.MetricType": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "timestamp.Timestamp": {
                    "category": "alias",
                    "description": "A safe (always valid) time representation.\nA timestamp is the number of milliseconds (int64) since the UNIX epoch (which is in UTC).",
                    "alias-type": "int64"
                },
                "upload.RowEntry": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "entry",
                            "type": "interface {}"
                        },
                        {
                            "name": "row",
                            "type": "int"
                        }
                    ]
                },
                "upload.ScoreEntry": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        }
                    ]
                },
                "util.AggregateValues": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "max",
                            "type": "float64"
                        },
                        {
                            "name": "mean",
                            "type": "float64"
                        },
                        {
                            "name": "median",
                            "type": "float64"
                        },
                        {
                            "name": "min",
                            "type": "float64"
                        }
                    ]
                },
                "util.CallStack": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "records",
                            "type": "[]util.CallStackRecord"
                        },
                        {
                            "name": "status",
                            "type": "string"
                        }
                    ]
                },
                "util.CallStackRecord": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "call",
                            "type": "string"
                        },
                        {
                            "name": "file",
                            "type": "string"
                        },
                        {
                            "name": "line",
                            "type": "int"
                        },
                        {
                            "name": "pointer",
                            "type": "string"
                        }
                    ]
                },
                "util.FileOperation": {
                    "category": "array",
                    "description": "File operations represent simple file operations.\nAny represented file paths must be POSIX, relative, and not point to any parent directories.\nNote that this code will only work properly on POSIX systems because of the lexical analysis on paths.",
                    "element-type": "string"
                },
                "util.FileSpec": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "dest",
                            "type": "string"
                        },
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "reference",
                            "type": "string"
                        },
                        {
                            "name": "token",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        },
                        {
                            "name": "username",
                            "type": "string"
                        }
                    ]
                },
                "util.FileSpecType": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "util.Version": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "base-version",
                            "type": "string"
                        },
                        {
                            "name": "git-hash",
                            "type": "string"
                        },
                        {
                            "name": "is-dirty",
                            "type": "bool"
                        }
                    ]
                }
            }
        }
    },
    "{\"arguments\":{\"force-compute\":true},\"endpoint\":\"metadata/describe\",\"files\":[]}": {
        "endpoint": "metadata/describe",
        "module_name": "autograder.api.metadata.describe",
        "arguments": {
            "force-compute": true
        },
        "output": {
            "endpoints": {
                "courses/admin/email": {
                    "description": "Send an email to course users.",
                    "input": [
                        {
                            "name": "bcc",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "body",
                            "type": "string"
                        },
                        {
                            "name": "cc",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "html",
                            "type": "bool"
                        },
                        {
                            "name": "subject",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "to",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "bcc",
                            "type": "[]string"
                        },
                        {
                            "name": "cc",
                            "type": "[]string"
                        },
                        {
                            "name": "to",
                            "type": "[]string"
                        }
                    ]
                },
                "courses/admin/update": {
                    "description": "Update an existing course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "result",
                            "type": "*courses.CourseUpsertResult"
                        }
                    ]
                },
                "courses/assignments/get": {
                    "description": "Get the information for a course assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "assignment",
                            "type": "*core.AssignmentInfo"
                        }
                    ]
                },
                "courses/assignments/list": {
                    "description": "List the assignments in the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "assignments",
                            "type": "[]*core.AssignmentInfo"
                        }
                    ]
                },
                "courses/assignments/report": {
                    "description": "Fetch an assignment grading report for a course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "course-report",
                            "type": "*report.CourseScoringReport"
                        }
                    ]
                },
                "courses/assignments/submissions/analysis/individual": {
                    "description": "Get the result of a individual analysis for the specified submissions.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "submissions",
                            "type": "[]string",
                            "description": "The raw submission specifications to analyze.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ],
                    "output": [
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "options",
                            "type": "analysis.AnalysisOptions"
                        },
                        {
                            "name": "results",
                            "type": "map[string]*model.IndividualAnalysis"
                        },
                        {
                            "name": "summary",
                            "type": "*model.IndividualAnalysisSummary"
                        },
                        {
                            "name": "work-errors",
                            "type": "map[string]string"
                        }
                    ]
                },
                "courses/assignments/submissions/analysis/pairwise": {
                    "description": "Get the result of a pairwise analysis for the specified submissions.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "submissions",
                            "type": "[]string",
                            "description": "The raw submission specifications to analyze.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ],
                    "output": [
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "options",
                            "type": "analysis.AnalysisOptions"
                        },
                        {
                            "name": "results",
                            "type": "map[model.PairwiseKey]*model.PairwiseAnalysis"
                        },
                        {
                            "name": "summary",
                            "type": "*model.PairwiseAnalysisSummary"
                        },
                        {
                            "name": "work-errors",
                            "type": "map[string]string"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/course/attempts": {
                    "description": "Get all recent submissions and grading information for this assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "If not empty, filter results to matching users."
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "grading-results",
                            "type": "map[string]*model.GradingResult"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/course/scores": {
                    "description": "Get a summary of the most recent scores for this assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "If not empty, filter results to matching users."
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "submission-infos",
                            "type": "map[string]*model.SubmissionHistoryItem"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/attempt": {
                    "description": "Get a submission along with all grading information.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-result",
                            "type": "*model.GradingResult"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/attempts": {
                    "description": "Get all submission attempts made by a user along with all grading information.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-results",
                            "type": "[]*model.GradingResult"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/history": {
                    "description": "Get a summary of the submissions for this assignment.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "history",
                            "type": "[]*model.SubmissionHistoryItem"
                        }
                    ]
                },
                "courses/assignments/submissions/fetch/user/peek": {
                    "description": "Get a copy of the grading report for the specified submission. Does not submit a new submission.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "submission-result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/assignments/submissions/proxy/regrade": {
                    "description": "Proxy regrade an assignment for all target users using their most recent submission.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "regrade-cutoff",
                            "type": "int64",
                            "description": "Ensure every user has made a new submission after this time.\nIf nil, the current time will be used."
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "The raw course user references to regrade.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ],
                    "output": [
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "options",
                            "type": "grader.RegradeOptions"
                        },
                        {
                            "name": "resolved-users",
                            "type": "[]string"
                        },
                        {
                            "name": "results",
                            "type": "map[string]*model.SubmissionHistoryItem"
                        },
                        {
                            "name": "work-errors",
                            "type": "map[string]string"
                        }
                    ]
                },
                "courses/assignments/submissions/proxy/resubmit": {
                    "description": "Proxy resubmit an assignment submission to the autograder.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "proxy-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "proxy-time",
                            "type": "int64"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-success",
                            "type": "bool"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "rejected",
                            "type": "bool"
                        },
                        {
                            "name": "result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/assignments/submissions/proxy/submit": {
                    "description": "Proxy submit an assignment submission to the autograder.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "proxy-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "proxy-time",
                            "type": "int64"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        },
                        {
                            "name": "grading-success",
                            "type": "bool"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "rejected",
                            "type": "bool"
                        },
                        {
                            "name": "result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/assignments/submissions/remove": {
                    "description": "Remove a specified submission. Defaults to the most recent submission.",
                    "input": [
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "target-submission",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-submission",
                            "type": "bool"
                        },
                        {
                            "name": "found-user",
                            "type": "bool"
                        }
                    ]
                },
                "courses/assignments/submissions/submit": {
                    "description": "Submit an assignment submission to the autograder.",
                    "input": [
                        {
                            "name": "allow-late",
                            "type": "bool"
                        },
                        {
                            "name": "assignment-id",
                            "type": "string",
                            "description": "The ID of the assignment to make this request to.",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "grading-success",
                            "type": "bool"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "rejected",
                            "type": "bool"
                        },
                        {
                            "name": "result",
                            "type": "*model.GradingInfo"
                        }
                    ]
                },
                "courses/lms/scores/upload": {
                    "description": "Perform a full scoring and upload scores to the course's LMS.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "results",
                            "type": "[]*model.ExternalScoringInfo"
                        }
                    ]
                },
                "courses/stats/query": {
                    "description": "Query metrics for a specific course.\nOnly the context course can be queried for, the target-course field will be ignored for this endpoint.",
                    "input": [
                        {
                            "name": "after",
                            "type": "int64",
                            "description": "Only return data from after this time.\nA value of zero is treated normally here (as UNIX epoch)."
                        },
                        {
                            "name": "before",
                            "type": "int64",
                            "description": "Only return data from before this time.\nA value of zero is treated as the end of time."
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "limit",
                            "type": "int",
                            "description": "Limit the number of results.\nTake this number of results from the top.\nA non-positive number means no count limit will be applied."
                        },
                        {
                            "name": "sort",
                            "type": "int",
                            "description": "Define how the results should be sorted by time.\n-1 for ascending, 0 for no sorting, 1 for descending."
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "description": "Only return data of this type.\nThis field is required in the query to specify which kind of metric to return.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "where",
                            "type": "map[stats.MetricAttribute]any",
                            "description": "Filter results to only include metrics that match Metric attribute field values.\nKeys are field names (e.g., \"course\") and values are what to include (e.g., course101).\nThis filter is applied after all other Query conditions are applied."
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*stats.Metric"
                        }
                    ]
                },
                "courses/upsert/filespec": {
                    "description": "Upsert a course using a filespec.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "filespec",
                            "type": "util.FileSpec",
                            "required": true
                        },
                        {
                            "name": "skip-build-images",
                            "type": "bool"
                        },
                        {
                            "name": "skip-emails",
                            "type": "bool"
                        },
                        {
                            "name": "skip-lms-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-source-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-template-files",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]courses.CourseUpsertResult"
                        }
                    ]
                },
                "courses/upsert/zip": {
                    "description": "Upsert a course using a zip file.",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool"
                        },
                        {
                            "name": "skip-build-images",
                            "type": "bool"
                        },
                        {
                            "name": "skip-emails",
                            "type": "bool"
                        },
                        {
                            "name": "skip-lms-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-source-sync",
                            "type": "bool"
                        },
                        {
                            "name": "skip-template-files",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]courses.CourseUpsertResult"
                        }
                    ]
                },
                "courses/users/drop": {
                    "description": "Drop a user from the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        }
                    ]
                },
                "courses/users/enroll": {
                    "description": "Enroll one or more users to the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Do not actually commit any changes or send any emails regardless of |SendEmails|."
                        },
                        {
                            "name": "raw-course-users",
                            "type": "[]*model.RawCourseUserData",
                            "required": true
                        },
                        {
                            "name": "send-emails",
                            "type": "bool",
                            "description": "Send any relevant email (usually about creation or password changing)."
                        },
                        {
                            "name": "skip-inserts",
                            "type": "bool"
                        },
                        {
                            "name": "skip-updates",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*model.ExternalUserOpResult"
                        }
                    ]
                },
                "courses/users/get": {
                    "description": "Get the information for a course user.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUserSelfOrGrader"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found",
                            "type": "bool"
                        },
                        {
                            "name": "user",
                            "type": "*core.CourseUserInfo"
                        }
                    ]
                },
                "courses/users/list": {
                    "description": "List the users in the course.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "users",
                            "type": "[]*core.CourseUserInfo"
                        }
                    ]
                },
                "lms/upload/scores": {
                    "description": "Upload scores from a tab-separated file to the course's LMS.\nThe file should not have headers, and should have two columns: email and score.",
                    "input": [
                        {
                            "name": "assignment-lms-id",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "scores",
                            "type": "[]upload.ScoreEntry",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "error-count",
                            "type": "int"
                        },
                        {
                            "name": "no-lms-id-users",
                            "type": "[]upload.RowEntry"
                        },
                        {
                            "name": "unrecognized-users",
                            "type": "[]upload.RowEntry"
                        }
                    ]
                },
                "lms/user/get": {
                    "description": "Get information for an LMS user.",
                    "input": [
                        {
                            "name": "course-id",
                            "type": "string",
                            "description": "The ID of the course to make this request to.",
                            "required": true
                        },
                        {
                            "name": "target-email",
                            "type": "core.TargetCourseUser",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-autograder-user",
                            "type": "bool"
                        },
                        {
                            "name": "found-lms-user",
                            "type": "bool"
                        },
                        {
                            "name": "user",
                            "type": "*core.CourseUserInfo"
                        }
                    ]
                },
                "logs/query": {
                    "description": "Query log entries from the autograder server.",
                    "input": [
                        {
                            "name": "after",
                            "type": "string"
                        },
                        {
                            "name": "level",
                            "type": "string"
                        },
                        {
                            "name": "past",
                            "type": "string"
                        },
                        {
                            "name": "target-assignment",
                            "type": "string"
                        },
                        {
                            "name": "target-course",
                            "type": "string"
                        },
                        {
                            "name": "target-email",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "error",
                            "type": "*model.ExternalLocatableError"
                        },
                        {
                            "name": "results",
                            "type": "[]*log.Record"
                        },
                        {
                            "name": "success",
                            "type": "bool"
                        }
                    ]
                },
                "metadata/describe": {
                    "description": "Describe all endpoints on the server.",
                    "input": [
                        {
                            "name": "force-compute",
                            "type": "bool"
                        }
                    ],
                    "output": [
                        {
                            "name": "endpoints",
                            "type": "map[string]core.EndpointDescription"
                        },
                        {
                            "name": "types",
                            "type": "map[string]core.TypeDescription"
                        }
                    ]
                },
                "metadata/heartbeat": {
                    "description": "Get server heartbeat.",
                    "input": [],
                    "output": [
                        {
                            "name": "server-version",
                            "type": "util.Version"
                        }
                    ]
                },
                "stats/query": {
                    "description": "Query stats for the server.",
                    "input": [
                        {
                            "name": "after",
                            "type": "int64",
                            "description": "Only return data from after this time.\nA value of zero is treated normally here (as UNIX epoch)."
                        },
                        {
                            "name": "before",
                            "type": "int64",
                            "description": "Only return data from before this time.\nA value of zero is treated as the end of time."
                        },
                        {
                            "name": "limit",
                            "type": "int",
                            "description": "Limit the number of results.\nTake this number of results from the top.\nA non-positive number means no count limit will be applied."
                        },
                        {
                            "name": "sort",
                            "type": "int",
                            "description": "Define how the results should be sorted by time.\n-1 for ascending, 0 for no sorting, 1 for descending."
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "description": "Only return data of this type.\nThis field is required in the query to specify which kind of metric to return.",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "where",
                            "type": "map[stats.MetricAttribute]any",
                            "description": "Filter results to only include metrics that match Metric attribute field values.\nKeys are field names (e.g., \"course\") and values are what to include (e.g., course101).\nThis filter is applied after all other Query conditions are applied."
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*stats.Metric"
                        }
                    ]
                },
                "system/stacks": {
                    "description": "Get stack traces for all the currently running routines (threads) on the server.",
                    "input": [
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "stacks",
                            "type": "[]*util.CallStack"
                        }
                    ]
                },
                "users/auth": {
                    "description": "Authenticate as a user.",
                    "input": [
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "success",
                            "type": "bool"
                        }
                    ]
                },
                "users/get": {
                    "description": "Get the information for a server user.",
                    "input": [
                        {
                            "name": "target-email",
                            "type": "core.TargetServerUserSelfOrAdmin"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "courses",
                            "type": "map[string]*core.CourseInfo"
                        },
                        {
                            "name": "found",
                            "type": "bool"
                        },
                        {
                            "name": "user",
                            "type": "*core.ServerUserInfo"
                        }
                    ]
                },
                "users/list": {
                    "description": "List the users on the server.",
                    "input": [
                        {
                            "name": "target-users",
                            "type": "[]model.ServerUserReference"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "users",
                            "type": "[]*core.ServerUserInfo"
                        }
                    ]
                },
                "users/password/change": {
                    "description": "Change your password to the one provided.",
                    "input": [
                        {
                            "name": "new-pass",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "duplicate",
                            "type": "bool"
                        },
                        {
                            "name": "success",
                            "type": "bool"
                        }
                    ]
                },
                "users/password/reset": {
                    "description": "Reset to a random password that will be emailed to you.",
                    "input": [
                        {
                            "name": "user-email",
                            "type": "string",
                            "required": true
                        }
                    ],
                    "output": []
                },
                "users/remove": {
                    "description": "Remove a user from the server.",
                    "input": [
                        {
                            "name": "target-email",
                            "type": "core.TargetServerUser",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found-user",
                            "type": "bool"
                        }
                    ]
                },
                "users/tokens/create": {
                    "description": "Create a new authentication token.",
                    "input": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "token-cleartext",
                            "type": "string"
                        },
                        {
                            "name": "token-id",
                            "type": "string"
                        }
                    ]
                },
                "users/tokens/delete": {
                    "description": "Delete an authentication token.",
                    "input": [
                        {
                            "name": "token-id",
                            "type": "string",
                            "required": true
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "found",
                            "type": "bool"
                        }
                    ]
                },
                "users/upsert": {
                    "description": "Upsert one or more users to the server (update if exists, insert otherwise).",
                    "input": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Do not actually commit any changes or send any emails regardless of |SendEmails|."
                        },
                        {
                            "name": "raw-users",
                            "type": "[]*model.RawServerUserData",
                            "required": true
                        },
                        {
                            "name": "send-emails",
                            "type": "bool",
                            "description": "Send any relevant email (usually about creation or password changing)."
                        },
                        {
                            "name": "skip-inserts",
                            "type": "bool"
                        },
                        {
                            "name": "skip-updates",
                            "type": "bool"
                        },
                        {
                            "name": "user-email",
                            "type": "string",
                            "description": "The email of the user making this request.",
                            "required": true
                        },
                        {
                            "name": "user-pass",
                            "type": "string",
                            "description": "The password of the user making this request.",
                            "required": true
                        }
                    ],
                    "output": [
                        {
                            "name": "results",
                            "type": "[]*model.ExternalUserOpResult"
                        }
                    ]
                }
            },
            "types": {
                "analysis.AnalysisOptions": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "submissions",
                            "type": "[]string",
                            "description": "The raw submission specifications to analyze."
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ]
                },
                "core.AssignmentInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "due-date",
                            "type": "int64"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "max-points",
                            "type": "float64"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "core.BaseFieldDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.CourseInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignments",
                            "type": "map[string]*core.AssignmentInfo"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "core.CourseUserInfo": {
                    "category": "struct",
                    "description": "An API-safe representation of a course user.\nEmbed the BaseUserInfo and use CourseUserInfoType as the type.",
                    "fields": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "lms-id",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "int"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.EndpointDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "input",
                            "type": "[]core.FieldDescription"
                        },
                        {
                            "name": "output",
                            "type": "[]core.BaseFieldDescription"
                        }
                    ]
                },
                "core.EnrollmentInfo": {
                    "category": "struct",
                    "description": "An API-safe representation of enrollment information.",
                    "fields": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "int"
                        }
                    ]
                },
                "core.FieldDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "required",
                            "type": "bool"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.NonEmptyString": {
                    "category": "alias",
                    "description": "The type for a named field that must have a non-empty string value.",
                    "alias-type": "string"
                },
                "core.ServerUserInfo": {
                    "category": "struct",
                    "description": "An API-safe representation of a server user.\nEmbed the BaseUserInfo and use ServerUserInfoType as the type.",
                    "fields": [
                        {
                            "name": "courses",
                            "type": "map[string]core.EnrollmentInfo"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "int"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ]
                },
                "core.TargetCourseUser": {
                    "category": "struct",
                    "description": "A request having a field of this type indicates that the request is targeting a specific course user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext."
                },
                "core.TargetCourseUserSelfOrGrader": {
                    "category": "struct",
                    "description": "Same as TargetServerUserSelfOrAdmin, but in the context of a course user and a grader context user.\nTherefore, the context user only has to be a grader in the context course (or the target user themself).\nWhen targeting yourself, the user can be a server admin (and will be escalated to course owner for the request).\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext.",
                    "fields": [
                        {
                            "name": "TargetCourseUser",
                            "type": "core.TargetCourseUser"
                        }
                    ]
                },
                "core.TargetServerUser": {
                    "category": "struct",
                    "description": "A request having a field of this type indicates that the request is targeting a specific server user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext."
                },
                "core.TargetServerUserSelfOrAdmin": {
                    "category": "struct",
                    "description": "A request having a field of this type indicates that the request is targeting a specific user.\nThis type serializes to/from a string.\nIf no user is specified, then the context user is the target.\nIf a user is specified, then the context user must be a server admin\n(any user can access their own resources, but higher permissions are required to access another user's resources).\nNo error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext.",
                    "fields": [
                        {
                            "name": "TargetServerUser",
                            "type": "core.TargetServerUser"
                        }
                    ]
                },
                "core.TypeDescription": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "alias-type",
                            "type": "string"
                        },
                        {
                            "name": "category",
                            "type": "string"
                        },
                        {
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "name": "element-type",
                            "type": "string"
                        },
                        {
                            "name": "fields",
                            "type": "[]core.BaseFieldDescription"
                        }
                    ]
                },
                "core.UserInfoType": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "courses.CourseUpsertResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-template-files",
                            "type": "map[string][]string"
                        },
                        {
                            "name": "built-assignment-images",
                            "type": "[]string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "created",
                            "type": "bool"
                        },
                        {
                            "name": "lms-sync-result",
                            "type": "*model.LMSSyncResult"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "success",
                            "type": "bool"
                        },
                        {
                            "name": "updated",
                            "type": "bool"
                        }
                    ]
                },
                "grader.RegradeOptions": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "dry-run",
                            "type": "bool",
                            "description": "Don't save anything."
                        },
                        {
                            "name": "overwrite-records",
                            "type": "bool",
                            "description": "Remove any existing records before running the job."
                        },
                        {
                            "name": "regrade-cutoff",
                            "type": "int64",
                            "description": "Ensure every user has made a new submission after this time.\nIf nil, the current time will be used."
                        },
                        {
                            "name": "target-users",
                            "type": "[]model.CourseUserReference",
                            "description": "The raw course user references to regrade."
                        },
                        {
                            "name": "wait-for-completion",
                            "type": "bool",
                            "description": "Wait for the entire job to complete and return all results."
                        }
                    ]
                },
                "log.LogLevel": {
                    "category": "alias",
                    "alias-type": "int32"
                },
                "log.Record": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment",
                            "type": "string"
                        },
                        {
                            "name": "attributes",
                            "type": "map[string]any",
                            "description": "Additional Attributes"
                        },
                        {
                            "name": "course",
                            "type": "string",
                            "description": "Context Attributes"
                        },
                        {
                            "name": "error",
                            "type": "string"
                        },
                        {
                            "name": "level",
                            "type": "int32",
                            "description": "Core Attributes"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.AnalysisFileInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "filename",
                            "type": "string"
                        },
                        {
                            "name": "lines-of-code",
                            "type": "int"
                        },
                        {
                            "name": "original-filename",
                            "type": "string"
                        }
                    ]
                },
                "model.AssignmentAnalysisOptions": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "exclude-patterns",
                            "type": "[]string"
                        },
                        {
                            "name": "include-patterns",
                            "type": "[]string"
                        },
                        {
                            "name": "template-file-ops",
                            "type": "[]*util.FileOperation"
                        },
                        {
                            "name": "template-files",
                            "type": "[]*util.FileSpec"
                        }
                    ]
                },
                "model.AssignmentInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "late-days-lms-id",
                            "type": "string"
                        },
                        {
                            "name": "late-days-lms-name",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "model.AssignmentSyncResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "ambiguous-matches",
                            "type": "[]model.AssignmentInfo"
                        },
                        {
                            "name": "non-matched-assignments",
                            "type": "[]model.AssignmentInfo"
                        },
                        {
                            "name": "synced-assignments",
                            "type": "[]model.AssignmentInfo"
                        },
                        {
                            "name": "unchanged-assignments",
                            "type": "[]model.AssignmentInfo"
                        }
                    ]
                },
                "model.CourseUserReference": {
                    "category": "alias",
                    "description": "Course user references can represent the following:\n- An email address.\n- A literal \"*\" (which includes all users in the course).\n- A course role (which will include all course users with that role).\n- Any of the above options preceded by a dash (\"-\") (which indicates that the user or group will NOT be included in the final results).",
                    "alias-type": "string"
                },
                "model.CourseUserRole": {
                    "category": "alias",
                    "description": "Course user roles represent a user's role within a single course.",
                    "alias-type": "int"
                },
                "model.ExternalLocatableError": {
                    "category": "struct",
                    "description": "A user safe version of locatable errors.\nAll LocatableErrors must be converted to ExternalLocatableErrors\nif it is to be given to a user.",
                    "fields": [
                        {
                            "name": "locator",
                            "type": "string"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ]
                },
                "model.ExternalScoringInfo": {
                    "category": "struct",
                    "description": "A trimmed-down version of ScoringInfo meant for external usage.",
                    "fields": [
                        {
                            "name": "assignment",
                            "type": "string"
                        },
                        {
                            "name": "raw-score",
                            "type": "float64"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "submission-id",
                            "type": "string"
                        },
                        {
                            "name": "submission-time",
                            "type": "int64"
                        },
                        {
                            "name": "upload-time",
                            "type": "int64"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.ExternalUserOpResult": {
                    "category": "struct",
                    "description": "A user safe representation of the UserOpResult struct.\nNotably all errors will be converted to responses and the cleartext password field is removed.\nFor descriptions of shared fields, see UserOpResult above.",
                    "fields": [
                        {
                            "name": "added",
                            "type": "bool",
                            "description": "The user was added to the server."
                        },
                        {
                            "name": "communication-error",
                            "type": "*model.ExternalLocatableError",
                            "description": "A user safe representation of a communication error."
                        },
                        {
                            "name": "dropped",
                            "type": "[]string",
                            "description": "The user was removed from the following courses (by id)."
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "description": "The email/id of the target user."
                        },
                        {
                            "name": "emailed",
                            "type": "bool",
                            "description": "The user was emailed during the course of this operation.\nThis is more than just GetEmail() was called, an actual email was sent\n(or would have been sent if this operation was during a dry-run)."
                        },
                        {
                            "name": "enrolled",
                            "type": "[]string",
                            "description": "The user was enrolled in the following courses (by id)."
                        },
                        {
                            "name": "modified",
                            "type": "bool",
                            "description": "The user existed before this operation and was edited (including enrollment changes)."
                        },
                        {
                            "name": "not-exists",
                            "type": "bool",
                            "description": "The user did not exist before this operation and does not exist after.\nThis may also be an error depending on the semantics of the operation."
                        },
                        {
                            "name": "removed",
                            "type": "bool",
                            "description": "The user existed before this operation and was removed."
                        },
                        {
                            "name": "skipped",
                            "type": "bool",
                            "description": "The user was skipped (often because they already exist)."
                        },
                        {
                            "name": "system-error",
                            "type": "*model.ExternalLocatableError",
                            "description": "A user safe representation of a system error."
                        },
                        {
                            "name": "validation-error",
                            "type": "*model.ExternalLocatableError",
                            "description": "A user safe representation of a validation error, which will not include a locator."
                        }
                    ]
                },
                "model.FileSimilarity": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "filename",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "map[string]any"
                        },
                        {
                            "name": "original-filename",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "tool",
                            "type": "string"
                        },
                        {
                            "name": "version",
                            "type": "string"
                        }
                    ]
                },
                "model.GradedQuestion": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "grading_end_time",
                            "type": "int64"
                        },
                        {
                            "name": "grading_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "hard_fail",
                            "type": "bool"
                        },
                        {
                            "name": "max_points",
                            "type": "float64"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "skipped",
                            "type": "bool"
                        }
                    ]
                },
                "model.GradingInfo": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "additional-info",
                            "type": "map[string]any"
                        },
                        {
                            "name": "assignment-id",
                            "type": "string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "epilogue",
                            "type": "string"
                        },
                        {
                            "name": "grading_end_time",
                            "type": "int64"
                        },
                        {
                            "name": "grading_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "max_points",
                            "type": "float64"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "prologue",
                            "type": "string"
                        },
                        {
                            "name": "proxy-user",
                            "type": "string"
                        },
                        {
                            "name": "proxy_end_time",
                            "type": "int64"
                        },
                        {
                            "name": "proxy_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "questions",
                            "type": "[]*model.GradedQuestion"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "short-id",
                            "type": "string"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.GradingResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "info",
                            "type": "*model.GradingInfo"
                        },
                        {
                            "name": "input-files-gzip",
                            "type": "map[string][]uint8"
                        },
                        {
                            "name": "output-files-gzip",
                            "type": "map[string][]uint8"
                        },
                        {
                            "name": "stderr",
                            "type": "string"
                        },
                        {
                            "name": "stdout",
                            "type": "string"
                        }
                    ]
                },
                "model.IndividualAnalysis": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "analysis-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "assignment-id",
                            "type": "string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "failure",
                            "type": "bool"
                        },
                        {
                            "name": "failure-message",
                            "type": "string"
                        },
                        {
                            "name": "files",
                            "type": "[]model.AnalysisFileInfo"
                        },
                        {
                            "name": "lines-of-code",
                            "type": "int"
                        },
                        {
                            "name": "lines-of-code-delta",
                            "type": "int"
                        },
                        {
                            "name": "lines-of-code-per-hour",
                            "type": "float64"
                        },
                        {
                            "name": "options",
                            "type": "*model.AssignmentAnalysisOptions"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "score-delta",
                            "type": "float64"
                        },
                        {
                            "name": "score-per-hour",
                            "type": "float64"
                        },
                        {
                            "name": "short-id",
                            "type": "string"
                        },
                        {
                            "name": "skipped-files",
                            "type": "[]string"
                        },
                        {
                            "name": "submission-id",
                            "type": "string"
                        },
                        {
                            "name": "submission-start-time",
                            "type": "int64"
                        },
                        {
                            "name": "submission-time-delta",
                            "type": "int64"
                        },
                        {
                            "name": "user-email",
                            "type": "string"
                        }
                    ]
                },
                "model.IndividualAnalysisSummary": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "aggregate-lines-of-code",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-lines-of-code-delta",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-lines-of-code-per-file",
                            "type": "map[string]util.AggregateValues"
                        },
                        {
                            "name": "aggregate-lines-of-code-per-hour",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-score",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-score-delta",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-score-per-hour",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "aggregate-submission-time-delta",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "complete-count",
                            "type": "int"
                        },
                        {
                            "name": "error-count",
                            "type": "int"
                        },
                        {
                            "name": "failure-count",
                            "type": "int"
                        },
                        {
                            "name": "first-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "last-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "pending-count",
                            "type": "int"
                        }
                    ]
                },
                "model.LMSSyncResult": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-sync",
                            "type": "*model.AssignmentSyncResult"
                        },
                        {
                            "name": "user-sync",
                            "type": "[]*model.UserOpResult"
                        }
                    ]
                },
                "model.LocatableError": {
                    "category": "struct",
                    "description": "A general representation of errors that have a definite source location."
                },
                "model.PairwiseAnalysis": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "analysis-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "failure",
                            "type": "bool"
                        },
                        {
                            "name": "failure-message",
                            "type": "string"
                        },
                        {
                            "name": "mean-similarities",
                            "type": "map[string]float64"
                        },
                        {
                            "name": "options",
                            "type": "*model.AssignmentAnalysisOptions"
                        },
                        {
                            "name": "similarities",
                            "type": "map[string][]*model.FileSimilarity"
                        },
                        {
                            "name": "skipped-files",
                            "type": "[]string"
                        },
                        {
                            "name": "submission-ids",
                            "type": "model.PairwiseKey"
                        },
                        {
                            "name": "total-mean-similarity",
                            "type": "float64"
                        },
                        {
                            "name": "unmatched-files",
                            "type": "[][]string"
                        }
                    ]
                },
                "model.PairwiseAnalysisSummary": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "aggregate-mean-similarities",
                            "type": "map[string]util.AggregateValues"
                        },
                        {
                            "name": "aggregate-total-mean-similarity",
                            "type": "util.AggregateValues"
                        },
                        {
                            "name": "complete",
                            "type": "bool"
                        },
                        {
                            "name": "complete-count",
                            "type": "int"
                        },
                        {
                            "name": "error-count",
                            "type": "int"
                        },
                        {
                            "name": "failure-count",
                            "type": "int"
                        },
                        {
                            "name": "first-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "last-timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "pending-count",
                            "type": "int"
                        }
                    ]
                },
                "model.PairwiseKey": {
                    "category": "array",
                    "description": "A key for pairwise analysis.\nShould always be an ordered (lexicographically) pair of full submissions IDs.",
                    "element-type": "string"
                },
                "model.RawCourseUserData": {
                    "category": "struct",
                    "description": "Raw/dirty data for a course user.\nThis struct is used for raw data coming from a single course.",
                    "fields": [
                        {
                            "name": "course-lms-id",
                            "type": "string"
                        },
                        {
                            "name": "course-role",
                            "type": "string"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ]
                },
                "model.RawServerUserData": {
                    "category": "struct",
                    "description": "Raw/dirty data for a user.\nThis struct can be directly embedded for Kong arguments.",
                    "fields": [
                        {
                            "name": "course",
                            "type": "string"
                        },
                        {
                            "name": "course-lms-id",
                            "type": "string"
                        },
                        {
                            "name": "course-role",
                            "type": "string"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "pass",
                            "type": "string"
                        },
                        {
                            "name": "role",
                            "type": "string"
                        }
                    ]
                },
                "model.ServerUserReference": {
                    "category": "alias",
                    "description": "Server user references can represent the following:\n- An email address.\n- A literal \"*\" (which includes all users on the server).\n- A server role (which will include all server users with that role).\n- <course-id>::<course-role> (which will include all users in the target course with that role).\n- *::<course-role> (which will include all users with the course role in any course).\n- <course-id>::* (which will include all users in the target course).\n- *::* (which includes all users enrolled in at least one course).\n- Any of the above options preceded by a dash (\"-\") (which indicates that the user or group will NOT be included in the final results).",
                    "alias-type": "string"
                },
                "model.ServerUserRole": {
                    "category": "alias",
                    "description": "Server user roles represent a user's role within an autograder server instance.",
                    "alias-type": "int"
                },
                "model.SubmissionHistoryItem": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-id",
                            "type": "string"
                        },
                        {
                            "name": "course-id",
                            "type": "string"
                        },
                        {
                            "name": "grading_start_time",
                            "type": "int64"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "max_points",
                            "type": "float64"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        },
                        {
                            "name": "short-id",
                            "type": "string"
                        },
                        {
                            "name": "user",
                            "type": "string"
                        }
                    ]
                },
                "model.UserOpResult": {
                    "category": "struct",
                    "description": "A general representation of the result of operations that modify a user in any way (add, remove, enroll, drop, etc).\nAll user-facing functions (essentially non-db functions) should return an instance or collection of these objects.",
                    "fields": [
                        {
                            "name": "added",
                            "type": "bool",
                            "description": "The user was added to the server."
                        },
                        {
                            "name": "cleartext-password",
                            "type": "string",
                            "description": "The following cleartext password was generated during this operation.\nCare should be taken to not expose this field."
                        },
                        {
                            "name": "communication-error",
                            "type": "*model.LocatableError",
                            "description": "The following error occurred during this operation, but not because of the provided data,\ni.e., the system was unable to communicate the results.\nThese errors are not guaranteed to be safe for users,\nand the calling code should decide how they should be managed."
                        },
                        {
                            "name": "dropped",
                            "type": "[]string",
                            "description": "The user was removed from the following courses (by id)."
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "description": "The email/id of the target user."
                        },
                        {
                            "name": "emailed",
                            "type": "bool",
                            "description": "The user was emailed during the course of this operation.\nThis is more than just GetEmail() was called, an actual email was sent\n(or would have been sent if this operation was during a dry-run)."
                        },
                        {
                            "name": "enrolled",
                            "type": "[]string",
                            "description": "The user was enrolled in the following courses (by id)."
                        },
                        {
                            "name": "modified",
                            "type": "bool",
                            "description": "The user existed before this operation and was edited (including enrollment changes)."
                        },
                        {
                            "name": "not-exists",
                            "type": "bool",
                            "description": "The user did not exist before this operation and does not exist after.\nThis may also be an error depending on the semantics of the operation."
                        },
                        {
                            "name": "removed",
                            "type": "bool",
                            "description": "The user existed before this operation and was removed."
                        },
                        {
                            "name": "skipped",
                            "type": "bool",
                            "description": "The user was skipped (often because they already exist)."
                        },
                        {
                            "name": "system-error",
                            "type": "*model.LocatableError",
                            "description": "The following error occurred during this operation, but not because of the provided data,\ni.e., they are the system's fault.\nThese errors are not guaranteed to be safe for users,\nand the calling code should decide how they should be managed."
                        },
                        {
                            "name": "validation-error",
                            "type": "*model.LocatableError",
                            "description": "The following error occurred during this operation because of the provided data,\ni.e., they are caused by the calling user.\nAll error messages should be safe for users."
                        }
                    ]
                },
                "report.AssignmentScoringReport": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignment-name",
                            "type": "string"
                        },
                        {
                            "name": "latest-submission",
                            "type": "int64"
                        },
                        {
                            "name": "number-of-submissions",
                            "type": "int"
                        },
                        {
                            "name": "questions",
                            "type": "[]*report.ScoringReportQuestionStats"
                        }
                    ]
                },
                "report.CourseScoringReport": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "assignments",
                            "type": "[]*report.AssignmentScoringReport"
                        },
                        {
                            "name": "course-name",
                            "type": "string"
                        }
                    ]
                },
                "report.ScoringReportQuestionStats": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "max",
                            "type": "float64"
                        },
                        {
                            "name": "mean",
                            "type": "float64"
                        },
                        {
                            "name": "median",
                            "type": "float64"
                        },
                        {
                            "name": "min",
                            "type": "float64"
                        },
                        {
                            "name": "question-name",
                            "type": "string"
                        },
                        {
                            "name": "standard-deviation",
                            "type": "float64"
                        }
                    ]
                },
                "stats.Metric": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "attributes",
                            "type": "map[stats.MetricAttribute]any",
                            "description": "Additional attributes that are not standard enough to be formalized in fields."
                        },
                        {
                            "name": "timestamp",
                            "type": "int64"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "float64"
                        }
                    ]
                },
                "stats.MetricAttribute": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "stats.MetricType": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "timestamp.Timestamp": {
                    "category": "alias",
                    "description": "A safe (always valid) time representation.\nA timestamp is the number of milliseconds (int64) since the UNIX epoch (which is in UTC).",
                    "alias-type": "int64"
                },
                "upload.RowEntry": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "entry",
                            "type": "interface {}"
                        },
                        {
                            "name": "row",
                            "type": "int"
                        }
                    ]
                },
                "upload.ScoreEntry": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "score",
                            "type": "float64"
                        }
                    ]
                },
                "util.AggregateValues": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "max",
                            "type": "float64"
                        },
                        {
                            "name": "mean",
                            "type": "float64"
                        },
                        {
                            "name": "median",
                            "type": "float64"
                        },
                        {
                            "name": "min",
                            "type": "float64"
                        }
                    ]
                },
                "util.CallStack": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "records",
                            "type": "[]util.CallStackRecord"
                        },
                        {
                            "name": "status",
                            "type": "string"
                        }
                    ]
                },
                "util.CallStackRecord": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "call",
                            "type": "string"
                        },
                        {
                            "name": "file",
                            "type": "string"
                        },
                        {
                            "name": "line",
                            "type": "int"
                        },
                        {
                            "name": "pointer",
                            "type": "string"
                        }
                    ]
                },
                "util.FileOperation": {
                    "category": "array",
                    "description": "File operations represent simple file operations.\nAny represented file paths must be POSIX, relative, and not point to any parent directories.\nNote that this code will only work properly on POSIX systems because of the lexical analysis on paths.",
                    "element-type": "string"
                },
                "util.FileSpec": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "dest",
                            "type": "string"
                        },
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "reference",
                            "type": "string"
                        },
                        {
                            "name": "token",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        },
                        {
                            "name": "username",
                            "type": "string"
                        }
                    ]
                },
                "util.FileSpecType": {
                    "category": "alias",
                    "alias-type": "string"
                },
                "util.Version": {
                    "category": "struct",
                    "fields": [
                        {
                            "name": "base-version",
                            "type": "string"
                        },
                        {
                            "name": "git-hash",
                            "type": "string"
                        },
                        {
                            "name": "is-dirty",
                            "type": "bool"
                        }
                    ]
                }
            }
        }
    },
    "{\"arguments\":{},\"endpoint\":\"metadata/heartbeat\",\"files\":[]}": {
        "endpoint": "metadata/heartbeat",
        "module_name": "autograder.api.metadata.heartbeat",
        "arguments": {},
        "output": {
            "server-version": {
                "base-version": "1.2.3",
                "git-hash": "12345678",
                "is-dirty": true
            }
        }
    },
    "{\"arguments\":{\"type\":\"cpu-usage\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"stats/query\",\"files\":[]}": {
        "endpoint": "stats/query",
        "module_name": "autograder.api.stats.query",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "type": "cpu-usage"
        },
        "output": {
            "results": [
                {
                    "timestamp": 100,
                    "type": "cpu-usage",
                    "value": 1
                },
                {
                    "timestamp": 200,
                    "type": "cpu-usage",
                    "value": 2
                },
                {
                    "timestamp": 300,
                    "type": "cpu-usage",
                    "value": 3
                }
            ]
        }
    },
    "{\"arguments\":{\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"system/stacks\",\"files\":[]}": {
        "endpoint": "system/stacks",
        "module_name": "autograder.api.system.stacks",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin"
        },
        "output": {
            "stacks": [
                {
                    "name": "goroutine 1",
                    "status": "chan receive, 3 minutes",
                    "records": [
                        {
                            "call": "github.com/edulinq/autograder/internal/api/server.(*APIServer).RunAndBlock(0xc0003422b0, {0xe4a5fb?, 0x0?})",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/api/server/server.go",
                            "line": 63,
                            "pointer": "+0x265"
                        },
                        {
                            "call": "github.com/edulinq/autograder/internal/procedures/server.RunAndBlock.RunAndBlockFull.func1(0xc000091e78, {0xe4a5fb, 0xe}, 0xe0?)",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/procedures/server/start.go",
                            "line": 112,
                            "pointer": "+0x115"
                        },
                        {
                            "call": "github.com/edulinq/autograder/internal/procedures/server.RunAndBlockFull(...)",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/procedures/server/start.go",
                            "line": 117,
                            "pointer": ""
                        },
                        {
                            "call": "github.com/edulinq/autograder/internal/procedures/server.RunAndBlock({0xe4a5fb?, 0x0?})",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/procedures/server/start.go",
                            "line": 95,
                            "pointer": "+0x2b"
                        },
                        {
                            "call": "main.main()",
                            "file": "/home/eriq/code/autograder/autograder-server/cmd/server/main.go",
                            "line": 23,
                            "pointer": "+0xf6"
                        }
                    ]
                },
                {
                    "name": "goroutine 7",
                    "status": "chan receive, 3 minutes",
                    "records": [
                        {
                            "call": "github.com/edulinq/autograder/internal/common.removeStaleLocks()",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/common/lockmanager.go",
                            "line": 95,
                            "pointer": "+0x54"
                        },
                        {
                            "call": "created by github.com/edulinq/autograder/internal/common.init.0 in goroutine 1",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/common/lockmanager.go",
                            "line": 28,
                            "pointer": "+0x4c"
                        }
                    ]
                },
                {
                    "name": "goroutine 21",
                    "status": "sleep, 2 minutes",
                    "records": [
                        {
                            "call": "time.Sleep(0x1bf08eb000)",
                            "file": "/usr/lib/go/src/runtime/time.go",
                            "line": 300,
                            "pointer": "+0xf2"
                        },
                        {
                            "call": "github.com/edulinq/autograder/internal/tasks.runTasks()",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/tasks/core.go",
                            "line": 57,
                            "pointer": "+0x6f"
                        },
                        {
                            "call": "created by github.com/edulinq/autograder/internal/tasks.Start in goroutine 1",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/tasks/core.go",
                            "line": 26,
                            "pointer": "+0x7f"
                        }
                    ]
                },
                {
                    "name": "goroutine 25",
                    "status": "syscall, 3 minutes",
                    "records": [
                        {
                            "call": "os/signal.signal_recv()",
                            "file": "/usr/lib/go/src/runtime/sigqueue.go",
                            "line": 152,
                            "pointer": "+0x29"
                        },
                        {
                            "call": "os/signal.loop()",
                            "file": "/usr/lib/go/src/os/signal/signal_unix.go",
                            "line": 23,
                            "pointer": "+0x13"
                        },
                        {
                            "call": "created by os/signal.Notify.func1.1 in goroutine 1",
                            "file": "/usr/lib/go/src/os/signal/signal.go",
                            "line": 151,
                            "pointer": "+0x1f"
                        }
                    ]
                },
                {
                    "name": "goroutine 26",
                    "status": "chan receive, 3 minutes",
                    "records": [
                        {
                            "call": "github.com/edulinq/autograder/internal/api/server.(*APIServer).RunAndBlock.func4()",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/api/server/server.go",
                            "line": 56,
                            "pointer": "+0x25"
                        },
                        {
                            "call": "created by github.com/edulinq/autograder/internal/api/server.(*APIServer).RunAndBlock in goroutine 1",
                            "file": "/home/eriq/code/autograder/autograder-server/internal/api/server/server.go",
                            "line": 55,
                            "pointer": "+0x23f"
                        }
                    ]
                },
                {
                    "name": "goroutine 99",
                    "status": "IO wait",
                    "records": [
                        {
                            "call": "internal/poll.runtime_pollWait(0x790e13448ca0, 0x72)",
                            "file": "/usr/lib/go/src/runtime/netpoll.go",
                            "line": 351,
                            "pointer": "+0x85"
                        },
                        {
                            "call": "internal/poll.(*pollDesc).wait(0xc000182380?, 0xc000162131?, 0x0)",
                            "file": "/usr/lib/go/src/internal/poll/fd_poll_runtime.go",
                            "line": 84,
                            "pointer": "+0x27"
                        },
                        {
                            "call": "internal/poll.(*pollDesc).waitRead(...)",
                            "file": "/usr/lib/go/src/internal/poll/fd_poll_runtime.go",
                            "line": 89,
                            "pointer": ""
                        },
                        {
                            "call": "internal/poll.(*FD).Read(0xc000182380, {0xc000162131, 0x1, 0x1})",
                            "file": "/usr/lib/go/src/internal/poll/fd_unix.go",
                            "line": 165,
                            "pointer": "+0x27a"
                        },
                        {
                            "call": "net.(*netFD).Read(0xc000182380, {0xc000162131?, 0x0?, 0x0?})",
                            "file": "/usr/lib/go/src/net/fd_posix.go",
                            "line": 55,
                            "pointer": "+0x25"
                        },
                        {
                            "call": "net.(*conn).Read(0xc000452060, {0xc000162131?, 0x0?, 0x0?})",
                            "file": "/usr/lib/go/src/net/net.go",
                            "line": 189,
                            "pointer": "+0x45"
                        },
                        {
                            "call": "net/http.(*connReader).backgroundRead(0xc000162120)",
                            "file": "/usr/lib/go/src/net/http/server.go",
                            "line": 690,
                            "pointer": "+0x37"
                        },
                        {
                            "call": "created by net/http.(*connReader).startBackgroundRead in goroutine 98",
                            "file": "/usr/lib/go/src/net/http/server.go",
                            "line": 686,
                            "pointer": "+0xb6"
                        }
                    ]
                }
            ]
        }
    },
    "{\"arguments\":{\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae\"},\"endpoint\":\"users/auth\",\"files\":[]}": {
        "endpoint": "users/auth",
        "module_name": "autograder.api.users.auth",
        "arguments": {
            "pass": "foo"
        },
        "output": {
            "code": 401,
            "message": "Authentication failure, check email and password.",
            "python-message": "Failed to complete operation: Authentication failure, check email and password."
        }
    },
    "{\"arguments\":{\"user-email\":\"ZZZ\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/auth\",\"files\":[]}": {
        "endpoint": "users/auth",
        "module_name": "autograder.api.users.auth",
        "arguments": {
            "user": "ZZZ"
        },
        "output": {
            "code": 401,
            "message": "Authentication failure, check email and password.",
            "python-message": "Failed to complete operation: Authentication failure, check email and password."
        }
    },
    "{\"arguments\":{\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/auth\",\"files\":[]}": {
        "endpoint": "users/auth",
        "module_name": "autograder.api.users.auth",
        "arguments": {},
        "output": {
            "success": true
        }
    },
    "{\"arguments\":{\"target-email\":\"server-user@test.edulinq.org\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-email": "server-user@test.edulinq.org"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "server-user@test.edulinq.org",
                "name": "server-user",
                "role": "user",
                "courses": {}
            },
            "courses": {}
        }
    },
    "{\"arguments\":{\"user-email\":\"course-grader@test.edulinq.org\",\"user-pass\":\"6be92840236110ea654fc87be7e023f3b7cc0a965681f4371679cf6aedfaa822\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "course-grader@test.edulinq.org",
            "pass": "course-grader"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "course-grader@test.edulinq.org",
                "name": "course-grader",
                "role": "user",
                "courses": {
                    "course-languages": {
                        "id": "course-languages",
                        "role": "grader"
                    },
                    "course101": {
                        "id": "course101",
                        "role": "grader"
                    }
                }
            },
            "courses": {
                "course-languages": {
                    "id": "course-languages",
                    "name": "Course Using Different Languages",
                    "assignments": {
                        "bash": {
                            "id": "bash",
                            "name": "A Simple Bash Assignment",
                            "due-date": 0
                        },
                        "cpp-simple": {
                            "id": "cpp-simple",
                            "name": "A Simple C++ Assignment"
                        },
                        "java": {
                            "id": "java",
                            "name": "A Simple Java Assignment"
                        }
                    }
                },
                "course101": {
                    "id": "course101",
                    "name": "Course 101",
                    "assignments": {
                        "hw0": {
                            "id": "hw0",
                            "name": "Homework 0"
                        }
                    }
                }
            }
        }
    },
    "{\"arguments\":{\"user-email\":\"course-other@test.edulinq.org\",\"user-pass\":\"eb79491a5f22c9d9d5a4b9c6ec5707e2480298ff552272fa8e2b84fb6e58fef4\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "course-other@test.edulinq.org",
            "pass": "course-other"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "course-other@test.edulinq.org",
                "name": "course-other",
                "role": "user",
                "courses": {
                    "course-languages": {
                        "id": "course-languages",
                        "role": "other"
                    },
                    "course101": {
                        "id": "course101",
                        "role": "other"
                    }
                }
            },
            "courses": {
                "course-languages": {
                    "id": "course-languages",
                    "name": "Course Using Different Languages",
                    "assignments": {
                        "bash": {
                            "id": "bash",
                            "name": "A Simple Bash Assignment",
                            "due-date": 0
                        },
                        "cpp-simple": {
                            "id": "cpp-simple",
                            "name": "A Simple C++ Assignment"
                        },
                        "java": {
                            "id": "java",
                            "name": "A Simple Java Assignment"
                        }
                    }
                },
                "course101": {
                    "id": "course101",
                    "name": "Course 101",
                    "assignments": {
                        "hw0": {
                            "id": "hw0",
                            "name": "Homework 0"
                        }
                    }
                }
            }
        }
    },
    "{\"arguments\":{\"user-email\":\"course-owner@test.edulinq.org\",\"user-pass\":\"b64e37dd98e0a08dd96bcbebb2d9f5b6b4d0957663dcc6799d2c15883928e905\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "course-owner@test.edulinq.org",
            "pass": "course-owner"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "course-owner@test.edulinq.org",
                "name": "course-owner",
                "role": "user",
                "courses": {
                    "course-languages": {
                        "id": "course-languages",
                        "role": "owner"
                    },
                    "course101": {
                        "id": "course101",
                        "role": "owner"
                    }
                }
            },
            "courses": {
                "course-languages": {
                    "id": "course-languages",
                    "name": "Course Using Different Languages",
                    "assignments": {
                        "bash": {
                            "id": "bash",
                            "name": "A Simple Bash Assignment",
                            "due-date": 0
                        },
                        "cpp-simple": {
                            "id": "cpp-simple",
                            "name": "A Simple C++ Assignment"
                        },
                        "java": {
                            "id": "java",
                            "name": "A Simple Java Assignment"
                        }
                    }
                },
                "course101": {
                    "id": "course101",
                    "name": "Course 101",
                    "assignments": {
                        "hw0": {
                            "id": "hw0",
                            "name": "Homework 0"
                        }
                    }
                }
            }
        }
    },
    "{\"arguments\":{\"user-email\":\"course-student@test.edulinq.org\",\"user-pass\":\"10a24248efef33e125728f7252d097d4c9022ad82244f0924969fd0ea87d712a\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "course-student@test.edulinq.org",
            "pass": "course-student"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "course-student@test.edulinq.org",
                "name": "course-student",
                "role": "user",
                "courses": {
                    "course-languages": {
                        "id": "course-languages",
                        "role": "student"
                    },
                    "course101": {
                        "id": "course101",
                        "role": "student"
                    }
                }
            },
            "courses": {
                "course-languages": {
                    "id": "course-languages",
                    "name": "Course Using Different Languages",
                    "assignments": {
                        "bash": {
                            "id": "bash",
                            "name": "A Simple Bash Assignment",
                            "due-date": 0
                        },
                        "cpp-simple": {
                            "id": "cpp-simple",
                            "name": "A Simple C++ Assignment"
                        },
                        "java": {
                            "id": "java",
                            "name": "A Simple Java Assignment"
                        }
                    }
                },
                "course101": {
                    "id": "course101",
                    "name": "Course 101",
                    "assignments": {
                        "hw0": {
                            "id": "hw0",
                            "name": "Homework 0"
                        }
                    }
                }
            }
        }
    },
    "{\"arguments\":{\"target-email\":\"course-student@test.edulinq.org\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-email": "course-student@test.edulinq.org"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "course-student@test.edulinq.org",
                "name": "course-student",
                "role": "user",
                "courses": {
                    "course-languages": {
                        "id": "course-languages",
                        "role": "student"
                    },
                    "course101": {
                        "id": "course101",
                        "role": "student"
                    }
                }
            },
            "courses": {
                "course-languages": {
                    "id": "course-languages",
                    "name": "Course Using Different Languages",
                    "assignments": {
                        "bash": {
                            "id": "bash",
                            "name": "A Simple Bash Assignment",
                            "due-date": 0
                        },
                        "cpp-simple": {
                            "id": "cpp-simple",
                            "name": "A Simple C++ Assignment"
                        },
                        "java": {
                            "id": "java",
                            "name": "A Simple Java Assignment"
                        }
                    }
                },
                "course101": {
                    "id": "course101",
                    "name": "Course 101",
                    "assignments": {
                        "hw0": {
                            "id": "hw0",
                            "name": "Homework 0"
                        }
                    }
                }
            }
        }
    },
    "{\"arguments\":{\"target-email\":\"ZZZ@test.edulinq.org\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-email": "ZZZ@test.edulinq.org"
        },
        "output": {
            "found": false,
            "user": null,
            "courses": null
        }
    },
    "{\"arguments\":{\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {},
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "course-admin@test.edulinq.org",
                "name": "course-admin",
                "role": "user",
                "courses": {
                    "course-languages": {
                        "id": "course-languages",
                        "role": "admin"
                    },
                    "course101": {
                        "id": "course101",
                        "role": "admin"
                    }
                }
            },
            "courses": {
                "course-languages": {
                    "id": "course-languages",
                    "name": "Course Using Different Languages",
                    "assignments": {
                        "bash": {
                            "id": "bash",
                            "name": "A Simple Bash Assignment",
                            "due-date": 0
                        },
                        "cpp-simple": {
                            "id": "cpp-simple",
                            "name": "A Simple C++ Assignment"
                        },
                        "java": {
                            "id": "java",
                            "name": "A Simple Java Assignment"
                        }
                    }
                },
                "course101": {
                    "id": "course101",
                    "name": "Course 101",
                    "assignments": {
                        "hw0": {
                            "id": "hw0",
                            "name": "Homework 0"
                        }
                    }
                }
            }
        }
    },
    "{\"arguments\":{\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "server-admin@test.edulinq.org",
                "name": "server-admin",
                "role": "admin",
                "courses": {}
            },
            "courses": {}
        }
    },
    "{\"arguments\":{\"user-email\":\"server-creator@test.edulinq.org\",\"user-pass\":\"772157961087b45260009a804ab937133e0ca8181e40dc5267a9b24d89514582\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "server-creator@test.edulinq.org",
            "pass": "server-creator"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "server-creator@test.edulinq.org",
                "name": "server-creator",
                "role": "creator",
                "courses": {}
            },
            "courses": {}
        }
    },
    "{\"arguments\":{\"user-email\":\"server-owner@test.edulinq.org\",\"user-pass\":\"b61ec8013bc8cc02f9e4fb199c13970a226f0f76d5f8145252c6f6751c283bf4\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "server-owner@test.edulinq.org",
            "pass": "server-owner"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "server-owner@test.edulinq.org",
                "name": "server-owner",
                "role": "owner",
                "courses": {}
            },
            "courses": {}
        }
    },
    "{\"arguments\":{\"user-email\":\"server-user@test.edulinq.org\",\"user-pass\":\"24ffc21469baecb37b0eed63e737fa07f95fa8cf40cfad84c57bcc5eb4130baf\"},\"endpoint\":\"users/get\",\"files\":[]}": {
        "endpoint": "users/get",
        "module_name": "autograder.api.users.get",
        "arguments": {
            "user": "server-user@test.edulinq.org",
            "pass": "server-user"
        },
        "output": {
            "found": true,
            "user": {
                "type": "server",
                "email": "server-user@test.edulinq.org",
                "name": "server-user",
                "role": "user",
                "courses": {}
            },
            "courses": {}
        }
    },
    "{\"arguments\":{\"target-users\":[\"*\"],\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/list\",\"files\":[]}": {
        "endpoint": "users/list",
        "module_name": "autograder.api.users.list",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-users": [
                "*"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "server",
                    "email": "course-admin@test.edulinq.org",
                    "name": "course-admin",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "admin"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "admin"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-grader@test.edulinq.org",
                    "name": "course-grader",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "grader"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "grader"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-other@test.edulinq.org",
                    "name": "course-other",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "other"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "other"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-owner@test.edulinq.org",
                    "name": "course-owner",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "owner"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "owner"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-student@test.edulinq.org",
                    "name": "course-student",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "student"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "student"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "server-admin@test.edulinq.org",
                    "name": "server-admin",
                    "role": "admin",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-creator@test.edulinq.org",
                    "name": "server-creator",
                    "role": "creator",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-owner@test.edulinq.org",
                    "name": "server-owner",
                    "role": "owner",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-user@test.edulinq.org",
                    "name": "server-user",
                    "role": "user",
                    "courses": {}
                }
            ]
        }
    },
    "{\"arguments\":{\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/list\",\"files\":[]}": {
        "endpoint": "users/list",
        "module_name": "autograder.api.users.list",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin"
        },
        "output": {
            "users": [
                {
                    "type": "server",
                    "email": "course-admin@test.edulinq.org",
                    "name": "course-admin",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "admin"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "admin"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-grader@test.edulinq.org",
                    "name": "course-grader",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "grader"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "grader"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-other@test.edulinq.org",
                    "name": "course-other",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "other"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "other"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-owner@test.edulinq.org",
                    "name": "course-owner",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "owner"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "owner"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "course-student@test.edulinq.org",
                    "name": "course-student",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "student"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "student"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "server-admin@test.edulinq.org",
                    "name": "server-admin",
                    "role": "admin",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-creator@test.edulinq.org",
                    "name": "server-creator",
                    "role": "creator",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-owner@test.edulinq.org",
                    "name": "server-owner",
                    "role": "owner",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-user@test.edulinq.org",
                    "name": "server-user",
                    "role": "user",
                    "courses": {}
                }
            ]
        }
    },
    "{\"arguments\":{\"target-users\":[\"course101::admin\"],\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/list\",\"files\":[]}": {
        "endpoint": "users/list",
        "module_name": "autograder.api.users.list",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-users": [
                "course101::admin"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "server",
                    "email": "course-admin@test.edulinq.org",
                    "name": "course-admin",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "admin"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "admin"
                        }
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"target-users\":[\"course-grader@test.edulinq.org\",\"server-user@test.edulinq.org\"],\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/list\",\"files\":[]}": {
        "endpoint": "users/list",
        "module_name": "autograder.api.users.list",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-users": [
                "course-grader@test.edulinq.org",
                "server-user@test.edulinq.org"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "server",
                    "email": "course-grader@test.edulinq.org",
                    "name": "course-grader",
                    "role": "user",
                    "courses": {
                        "course-languages": {
                            "id": "course-languages",
                            "role": "grader"
                        },
                        "course101": {
                            "id": "course101",
                            "role": "grader"
                        }
                    }
                },
                {
                    "type": "server",
                    "email": "server-user@test.edulinq.org",
                    "name": "server-user",
                    "role": "user",
                    "courses": {}
                }
            ]
        }
    },
    "{\"arguments\":{\"target-users\":[\"*\",\"-*::*\"],\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/list\",\"files\":[]}": {
        "endpoint": "users/list",
        "module_name": "autograder.api.users.list",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-users": [
                "*",
                "-*::*"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "server",
                    "email": "server-admin@test.edulinq.org",
                    "name": "server-admin",
                    "role": "admin",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-creator@test.edulinq.org",
                    "name": "server-creator",
                    "role": "creator",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-owner@test.edulinq.org",
                    "name": "server-owner",
                    "role": "owner",
                    "courses": {}
                },
                {
                    "type": "server",
                    "email": "server-user@test.edulinq.org",
                    "name": "server-user",
                    "role": "user",
                    "courses": {}
                }
            ]
        }
    },
    "{\"arguments\":{\"target-users\":[\"creator\"],\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/list\",\"files\":[]}": {
        "endpoint": "users/list",
        "module_name": "autograder.api.users.list",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-users": [
                "creator"
            ]
        },
        "output": {
            "users": [
                {
                    "type": "server",
                    "email": "server-creator@test.edulinq.org",
                    "name": "server-creator",
                    "role": "creator",
                    "courses": {}
                }
            ]
        }
    },
    "{\"arguments\":{\"new-pass\":\"73740548d223792c35f0e1df5a5c543221786947281313a06fcf872af283816e\",\"user-email\":\"course-student@test.edulinq.org\",\"user-pass\":\"10a24248efef33e125728f7252d097d4c9022ad82244f0924969fd0ea87d712a\"},\"endpoint\":\"users/password/change\",\"files\":[]}": {
        "endpoint": "users/password/change",
        "module_name": "autograder.api.users.password.change",
        "arguments": {
            "user": "course-student@test.edulinq.org",
            "pass": "course-student",
            "new-pass": "spooky"
        },
        "output": {
            "success": true,
            "duplicate": false
        }
    },
    "{\"arguments\":{\"new-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/password/change\",\"files\":[]}": {
        "endpoint": "users/password/change",
        "module_name": "autograder.api.users.password.change",
        "arguments": {
            "new-pass": "course-admin"
        },
        "output": {
            "success": true,
            "duplicate": true
        }
    },
    "{\"arguments\":{\"user-email\":\"course-other@test.edulinq.org\"},\"endpoint\":\"users/password/reset\",\"files\":[]}": {
        "endpoint": "users/password/reset",
        "module_name": "autograder.api.users.password.reset",
        "arguments": {
            "user": "course-other@test.edulinq.org"
        },
        "output": {}
    },
    "{\"arguments\":{\"target-email\":\"server-user@test.edulinq.org\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/remove\",\"files\":[]}": {
        "endpoint": "users/remove",
        "module_name": "autograder.api.users.remove",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-email": "server-user@test.edulinq.org"
        },
        "output": {
            "found-user": true
        }
    },
    "{\"arguments\":{\"target-email\":\"ZZZ@test.edulinq.org\",\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/remove\",\"files\":[]}": {
        "endpoint": "users/remove",
        "module_name": "autograder.api.users.remove",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "target-email": "ZZZ@test.edulinq.org"
        },
        "output": {
            "found-user": false
        }
    },
    "{\"arguments\":{\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {},
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"course-grader@test.edulinq.org\",\"user-pass\":\"6be92840236110ea654fc87be7e023f3b7cc0a965681f4371679cf6aedfaa822\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "course-grader@test.edulinq.org",
            "pass": "course-grader"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"course-other@test.edulinq.org\",\"user-pass\":\"eb79491a5f22c9d9d5a4b9c6ec5707e2480298ff552272fa8e2b84fb6e58fef4\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "course-other@test.edulinq.org",
            "pass": "course-other"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"course-owner@test.edulinq.org\",\"user-pass\":\"b64e37dd98e0a08dd96bcbebb2d9f5b6b4d0957663dcc6799d2c15883928e905\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "course-owner@test.edulinq.org",
            "pass": "course-owner"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"course-student@test.edulinq.org\",\"user-pass\":\"10a24248efef33e125728f7252d097d4c9022ad82244f0924969fd0ea87d712a\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "course-student@test.edulinq.org",
            "pass": "course-student"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"name\":\"foo\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "name": "foo"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"server-creator@test.edulinq.org\",\"user-pass\":\"772157961087b45260009a804ab937133e0ca8181e40dc5267a9b24d89514582\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "server-creator@test.edulinq.org",
            "pass": "server-creator"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"server-owner@test.edulinq.org\",\"user-pass\":\"b61ec8013bc8cc02f9e4fb199c13970a226f0f76d5f8145252c6f6751c283bf4\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "server-owner@test.edulinq.org",
            "pass": "server-owner"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"user-email\":\"server-user@test.edulinq.org\",\"user-pass\":\"24ffc21469baecb37b0eed63e737fa07f95fa8cf40cfad84c57bcc5eb4130baf\"},\"endpoint\":\"users/tokens/create\",\"files\":[]}": {
        "endpoint": "users/tokens/create",
        "module_name": "autograder.api.users.tokens.create",
        "arguments": {
            "user": "server-user@test.edulinq.org",
            "pass": "server-user"
        },
        "output": {
            "token-id": "<TOKEN_ID>",
            "token-cleartext": "<TOKEN_CLEARTEXT>"
        }
    },
    "{\"arguments\":{\"token-id\":\"df0a1f16-9cd8-4395-8509-10ae314fe6fc\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/tokens/delete\",\"files\":[]}": {
        "endpoint": "users/tokens/delete",
        "module_name": "autograder.api.users.tokens.delete",
        "arguments": {
            "token-id": "df0a1f16-9cd8-4395-8509-10ae314fe6fc"
        },
        "output": {
            "found": true
        }
    },
    "{\"arguments\":{\"token-id\":\"ZZZ\",\"user-email\":\"course-admin@test.edulinq.org\",\"user-pass\":\"c22755f48fa0ef601e8d57a3ba169eeda80e9b2d4eaecc2c2ca2ffc887722f7c\"},\"endpoint\":\"users/tokens/delete\",\"files\":[]}": {
        "endpoint": "users/tokens/delete",
        "module_name": "autograder.api.users.tokens.delete",
        "arguments": {
            "token-id": "ZZZ"
        },
        "output": {
            "found": false
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"new-user@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"user\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "new-user@test.edulinq.org",
                    "name": "",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "student",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "new-user@test.edulinq.org",
                    "added": true,
                    "emailed": true
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"file-new-user-1@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"user\"},{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"file-new-user-2@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"user\"},{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"file-new-user-3@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"user\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "file-new-user-1@test.edulinq.org",
                    "name": "",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                },
                {
                    "email": "file-new-user-2@test.edulinq.org",
                    "name": "",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                },
                {
                    "email": "file-new-user-3@test.edulinq.org",
                    "name": "",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "file-new-user-1@test.edulinq.org",
                    "added": true,
                    "emailed": true
                },
                {
                    "email": "file-new-user-2@test.edulinq.org",
                    "added": true,
                    "emailed": true
                },
                {
                    "email": "file-new-user-3@test.edulinq.org",
                    "added": true,
                    "emailed": true
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"course101\",\"course-lms-id\":\"first-lms-id\",\"course-role\":\"student\",\"email\":\"first@test.edulinq.org\",\"name\":\"first\",\"pass\":\"\",\"role\":\"user\"},{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"second@test.edulinq.org\",\"name\":\"second\",\"pass\":\"\",\"role\":\"creator\"},{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"val-error@test.edulinq.org\",\"name\":\"val-error\",\"pass\":\"\",\"role\":\"owner\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "first@test.edulinq.org",
                    "name": "first",
                    "role": "user",
                    "pass": "",
                    "course": "course101",
                    "course-role": "student",
                    "course-lms-id": "first-lms-id"
                },
                {
                    "email": "second@test.edulinq.org",
                    "name": "second",
                    "role": "creator",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                },
                {
                    "email": "val-error@test.edulinq.org",
                    "name": "val-error",
                    "role": "owner",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "first@test.edulinq.org",
                    "added": true,
                    "emailed": true,
                    "enrolled": [
                        "course101"
                    ]
                },
                {
                    "email": "second@test.edulinq.org",
                    "added": true,
                    "emailed": true
                },
                {
                    "email": "val-error@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"server-user@test.edulinq.org\",\"name\":\"sammy\",\"pass\":\"\",\"role\":\"user\"},{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"server-creator@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"user\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "server-user@test.edulinq.org",
                    "name": "sammy",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                },
                {
                    "email": "server-creator@test.edulinq.org",
                    "name": "",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "server-creator@test.edulinq.org",
                    "modified": true
                },
                {
                    "email": "server-user@test.edulinq.org",
                    "modified": true
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"error@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"owner\"},{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"server-user@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"owner\"},{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"unknown\",\"email\":\"server-owner@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"user\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "error@test.edulinq.org",
                    "name": "",
                    "role": "owner",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                },
                {
                    "email": "server-user@test.edulinq.org",
                    "name": "",
                    "role": "owner",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                },
                {
                    "email": "server-owner@test.edulinq.org",
                    "name": "",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "unknown",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "error@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                },
                {
                    "email": "server-owner@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                },
                {
                    "email": "server-user@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"server-user@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"creator\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "server-user@test.edulinq.org",
                    "name": "",
                    "role": "creator",
                    "pass": "",
                    "course": "",
                    "course-role": "student",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "server-user@test.edulinq.org",
                    "modified": true
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"alt-new-user@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"user\"}],\"send-emails\":true,\"skip-inserts\":true,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": true,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "alt-new-user@test.edulinq.org",
                    "name": "",
                    "role": "user",
                    "pass": "",
                    "course": "",
                    "course-role": "student",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "alt-new-user@test.edulinq.org",
                    "skipped": true
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"server-user@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"creator\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":true,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": true,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "server-user@test.edulinq.org",
                    "name": "",
                    "role": "creator",
                    "pass": "",
                    "course": "",
                    "course-role": "student",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "server-user@test.edulinq.org",
                    "skipped": true
                }
            ]
        }
    },
    "{\"arguments\":{\"dry-run\":false,\"raw-users\":[{\"course\":\"\",\"course-lms-id\":\"\",\"course-role\":\"student\",\"email\":\"server-user@test.edulinq.org\",\"name\":\"\",\"pass\":\"\",\"role\":\"owner\"}],\"send-emails\":true,\"skip-inserts\":false,\"skip-updates\":false,\"user-email\":\"server-admin@test.edulinq.org\",\"user-pass\":\"0bbd8baf32ffe3b12b8f0901cc7adb562a62aad964d48cc394c76af9609a8f81\"},\"endpoint\":\"users/upsert\",\"files\":[]}": {
        "endpoint": "users/upsert",
        "module_name": "autograder.api.users.upsert",
        "arguments": {
            "user": "server-admin@test.edulinq.org",
            "pass": "server-admin",
            "send-emails": true,
            "skip-inserts": false,
            "skip-updates": false,
            "dry-run": false,
            "raw-users": [
                {
                    "email": "server-user@test.edulinq.org",
                    "name": "",
                    "role": "owner",
                    "pass": "",
                    "course": "",
                    "course-role": "student",
                    "course-lms-id": ""
                }
            ]
        },
        "output": {
            "results": [
                {
                    "email": "server-user@test.edulinq.org",
                    "validation-error": {
                        "locator": "",
                        "message": "You have insufficient permissions for the requested operation."
                    }
                }
            ]
        }
    }
}
